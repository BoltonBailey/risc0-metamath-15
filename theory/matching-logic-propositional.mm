$[ theory/matching-logic-prelude.mm $]

$(

### Deduction theorem for itp proof script

Suppose we have the proof script for the following theorem

a.0 $e ... a.n $e
-----------------
a $p phi

To get a proof script of

a.1 $e ... a.n $e
-----------------
a $p a.0 -> phi

One can perform the following transformation on the proof script:

 - apply "proof-rule-mp" should be replaced by

   apply "proof-rule-mp"
   apply "proof-rule-mp"
   apply "proof-rule-prop-2"

 - apply <label> where <label> is an arbitrary statement WITHOUT essential hypotheses
   (NOTE: it can be an essential hypothesis itself)

   should be replaced by

   apply "proof-rule-mp"
   apply "proof-rule-prop-1"
   apply <label>

 - apply a.0 should be replaced by

   apply "imp-reflexivity"

And then the resulting proof script should produce a proof for the new theorem

$)

$(
    Natural proof rules (desugared version)
$)

imp-reflexivity $p |- ( \imp ph0 ph0 ) $=
    $(
        apply proof-rule-mp
        apply proof-rule-mp
        apply proof-rule-prop-2
        let $5 = "( \imp ph0 ph0 )"
        apply proof-rule-prop-1
        apply proof-rule-prop-1
    $)
    ( imp-is-pattern proof-rule-prop-1 proof-rule-mp proof-rule-prop-2 ) AAABBAABAAABABBAAABBAABBAAABAEAAABCDAACD $.

${
    rule-imp-transitivity.0 $e |- ( \imp ph0 ph1 ) $.
    rule-imp-transitivity.1 $e |- ( \imp ph1 ph2 ) $.
    rule-imp-transitivity $p |- ( \imp ph0 ph2 ) $=
        $(
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-prop-1"
            apply "rule-imp-transitivity.1"
            apply "rule-imp-transitivity.0"
        $)
        ( imp-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 ) ABFACFABCFFABFACFFABCHBCFABCFFBCFAIEGGDG $.
$}

$(
The proof script of this theorem is obtained by applying
the transformation described in `Deduction theorem for
itp proof script` twice on the proof script of `rule-imp-transitivity`
$)
imp-transitivity $p |- ( \imp ( \imp ph0 ph1 ) ( \imp ( \imp ph1 ph2 ) ( \imp ph0 ph2 ) ) ) $=
    $(
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-1"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-1"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-1"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "imp-reflexivity"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-1"
        apply "imp-reflexivity"
    $)
    ( imp-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 imp-reflexivity ) ABDBCDABDDDABDBCDACDDDABDBCDABDDBCDACDDDDABDBCDABDDDABDBCDACDDDDABDBCDABDDBCDACDDFABDBCDABDACDDDDABDBCDABDDBCDACDDDDABDBCDABDACDDDBCDABDDBCDACDDDDDABDBCDABDACDDDDABDBCDABDDBCDACDDDDDABDBCDABDACDDDBCDABDDBCDACDDDFBCDABDACDDDBCDABDDBCDACDDDDABDBCDABDACDDDBCDABDDBCDACDDDDDBCDABDACDDDBCDABDDBCDACDDDDABDGBCDABDACDFEEABDBCDABCDDDDABDBCDABDACDDDDABDBCDABCDDDBCDABDACDDDDDABDBCDABCDDDDABDBCDABDACDDDDDABDBCDABCDDDBCDABDACDDDFABDBCDABCDDABDACDDDDDABDBCDABCDDDBCDABDACDDDDDABDBCDABCDDABDACDDDDBCDABCDDDBCDABDACDDDDDDABDBCDABCDDABDACDDDDDABDBCDABCDDDBCDABDACDDDDDDABDBCDABCDDABDACDDDDBCDABCDDDBCDABDACDDDDFBCDABCDDABDACDDDDBCDABCDDDBCDABDACDDDDDABDBCDABCDDABDACDDDDBCDABCDDDBCDABDACDDDDDDBCDABCDDABDACDDDDBCDABCDDDBCDABDACDDDDDABDGBCDABCDDABDACDDFEEABDABCDDABDACDDDDABDBCDABCDDABDACDDDDDABDABCDDABDACDDDBCDABCDDABDACDDDDDDABDABCDDABDACDDDDABDBCDABCDDABDACDDDDDDABDABCDDABDACDDDBCDABCDDABDACDDDDFABCDDABDACDDDBCDABCDDABDACDDDDDABDABCDDABDACDDDBCDABCDDABDACDDDDDDABCDDABDACDDDBCDABCDDABDACDDDDDABDGABCDDABDACDDDBCDGEEABCDDABDACDDDABDABCDDABDACDDDDABCDDABDACDDDABDGABCFEEEEABDBCDBCDDDABDBCDABCDDDDABDBCDBCDDBCDABCDDDDDABDBCDBCDDDABDBCDABCDDDDDABDBCDBCDDBCDABCDDDFABDBCDBCDABCDDDDDABDBCDBCDDBCDABCDDDDDABDBCDBCDABCDDDDBCDBCDDBCDABCDDDDDDABDBCDBCDABCDDDDDABDBCDBCDDBCDABCDDDDDDABDBCDBCDABCDDDDBCDBCDDBCDABCDDDDFBCDBCDABCDDDDBCDBCDDBCDABCDDDDDABDBCDBCDABCDDDDBCDBCDDBCDABCDDDDDDBCDBCDABCDDDDBCDBCDDBCDABCDDDDDABDGBCDBCDABCDDFEEABDBCDABCDDDDABDBCDBCDABCDDDDDABDBCDABCDDDBCDBCDABCDDDDDDABDBCDABCDDDDABDBCDBCDABCDDDDDDABDBCDABCDDDBCDBCDABCDDDDFBCDABCDDDBCDBCDABCDDDDDABDBCDABCDDDBCDBCDABCDDDDDDBCDABCDDDBCDBCDABCDDDDDABDGBCDABCDDDBCDGEEBCDABCDDDABDBCDABCDDDDBCDABCDDDABDGBCDAGEEEEBCDBCDDABDBCDBCDDDBCDBCDDABDGBCDHEEEEEABDABDDABDBCDABDDDABDABDBCDABDDDDABDABDDABDBCDABDDDDABDABDBCDABDDFABDBCDABDDDABDABDBCDABDDDDABDBCDABDDDABDGABDBCDGEEABDHEE $.

bot-elim $p |- ( \imp \bot ph0 ) $=
    $(
        apply "proof-rule-mp"
        let $0 = "( \imp \bot ( \imp ( \imp ph0 \bot ) \bot ) )"
        apply "proof-rule-mp"
        let $2 = "( \imp \bot ( \imp ( \imp ( \imp ph0 \bot ) \bot ) ph0 ) )"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        let $7 = "( \imp ( \imp ( \imp ph0 \bot ) \bot ) ph0 )"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-3"
        apply "proof-rule-prop-1"
    $)
    ( imp-is-pattern bot-is-pattern proof-rule-mp proof-rule-prop-1 proof-rule-prop-2 proof-rule-prop-3 ) CACBCBBCABCACBCBABBCACBCBBCABBCACBCBAFACBCBABCACBCBABBACBCBABCEAGDDCACBED $.

contradiction $p |- ( \imp ( \imp ( \not ph0 ) \bot ) ph0 ) $=
    $(
        desugar "\not"
        apply "proof-rule-prop-3"
    $)
    ( bot-is-pattern imp-is-pattern not-is-pattern notation-reflexivity notation-imp proof-rule-prop-3 not-is-sugar notation-symmetry notation-transitivity notation-proof ) ABCBCACADBCACAGADBCAABCBCAADBABCBADABCABCAHABCABCABCEIJBEFAEFK $.

top-intro $p |- \top $=
    $(
        desugar-all
        apply "imp-reflexivity"
    $)
    ( bot-is-pattern imp-is-pattern not-is-pattern notation-symmetry top-is-pattern notation-transitivity imp-reflexivity top-is-sugar not-is-sugar notation-reflexivity notation-proof ) AABEAGEACAABHAABACACAABACAABAABAIAABAABAABJDFDDFK $.

mp $p |- ( \imp ph0 ( \imp ( \imp ph0 ph1 ) ph1 ) ) $=
    $(
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        let $0 = "( \imp ph0 ( \imp ( \imp ph0 ph1 ) ph0 ) )"
        let $2 = "( \imp ph0 ( \imp ( \imp ( \imp ph0 ph1 ) ph0 ) ( \imp ( \imp ph0 ph1 ) ph1 ) ) )"
        apply "proof-rule-prop-2"
        meh
        apply "proof-rule-prop-1"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        let $9 = "( \imp ph0 ( \imp ( \imp ph0 ph1 ) ( \imp ph0 ph1 ) ) )"
        let $11 = "( \imp ph0 ( \imp ( \imp ( \imp ph0 ph1 ) ( \imp ph0 ph1 ) ) ( \imp ( \imp ( \imp ph0 ph1 ) ph0 ) ( \imp ( \imp ph0 ph1 ) ph1 ) ) ) )"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        let $16 = "( \imp ( \imp ( \imp ph0 ph1 ) ( \imp ph0 ph1 ) ) ( \imp ( \imp ( \imp ph0 ph1 ) ph0 ) ( \imp ( \imp ph0 ph1 ) ph1 ) ) )"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        let $23 = "( \imp ( \imp ph0 ph1 ) ( \imp ph0 ph1 ) )"
        apply "proof-rule-prop-1"
        apply "imp-reflexivity"
    $)
    ( imp-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 imp-reflexivity ) AABCACCAABCBCCAABCACABCBCCCAABCACCAABCBCCCAABCACABCBCEAABCABCCCAABCACABCBCCCAABCABCCABCACABCBCCCCAABCABCCCAABCACABCBCCCCAABCABCCABCACABCBCCEABCABCCABCACABCBCCCAABCABCCABCACABCBCCCCABCABCCABCACABCBCCCAFABCABEDDABCABCCAABCABCCCABCABCCAFABCGDDDAABCFD $.

not-elim $p |- ( \imp ph0 ( \imp ( \imp ph0 \bot ) \bot ) ) $= $( apply mp $) ( bot-is-pattern mp ) ABC $.

or-intro-left $p |- ( \imp ph0 ( \imp ( \imp ph0 \bot ) ph1 ) ) $=
    $(
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        # let $0 = "( \imp ph0 ( \imp ( \imp ph0 \bot ) \bot ) )"
        # let $2 = "( \imp ph0 ( \imp ( \imp ( \imp ph0 \bot ) \bot ) ( \imp ( \imp ph0 \bot ) ph1 ) ) )"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        # let $9 = "( \imp ph0 ( \imp ( \imp ( \imp ph0 \bot ) ( \imp \bot ph1 ) ) ( \imp ( \imp ( \imp ph0 \bot ) \bot ) ( \imp ( \imp ph0 \bot ) ph1 ) ) ) )"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "bot-elim"
        apply "not-elim"
    $)
    ( imp-is-pattern bot-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 bot-elim not-elim ) AADCDCCAADCBCCAADCDCADCBCCCAADCDCCAADCBCCCAADCDCADCBCFAADCDBCCCAADCDCADCBCCCAADCDBCCADCDCADCBCCCCAADCDBCCCAADCDCADCBCCCCAADCDBCCADCDCADCBCCFADCDBCCADCDCADCBCCCAADCDBCCADCDCADCBCCCCADCDBCCADCDCADCBCCCAGADCDBFEEADCDBCCAADCDBCCCADCDBCCAGDBCADCDBCCDBCADCGBHEEEEAIE $.

contrapositive $p |- ( \imp ( \imp ph0 ph1 ) ( \imp ( \imp ph1 \bot ) ( \imp ph0 \bot ) ) ) $=
    $( apply "imp-transitivity" $) ( bot-is-pattern imp-transitivity ) ABCD $.

${
    rule-contrapositive.0 $e |- ( \imp ph0 ph1 ) $.
    rule-contrapositive $p |- ( \imp ( \imp ph1 \bot ) ( \imp ph0 \bot ) ) $=
        $(
            apply "proof-rule-mp"
            apply "contrapositive"
            apply "rule-contrapositive.0"
        $)
        ( imp-is-pattern bot-is-pattern contrapositive proof-rule-mp ) ABDBEDAEDDABFCG $.
$}

and-elim-left $p |- ( \imp ( \imp ( \imp ( \imp ( \imp ph0 \bot ) \bot ) ( \imp ph1 \bot ) ) \bot ) ph0 ) $=
    $(
        apply "rule-imp-transitivity"
        apply "rule-contrapositive"
        apply "or-intro-left"
        apply "proof-rule-prop-3"
    $)
    ( imp-is-pattern bot-is-pattern or-intro-left rule-contrapositive proof-rule-prop-3 rule-imp-transitivity ) ADCDCBDCCDCADCDCAADCADCDCBDCCADCBDCEFAGH $.

and-elim-right $p |- ( \imp ( \imp ( \imp ( \imp ( \imp ph0 \bot ) \bot ) ( \imp ph1 \bot ) ) \bot ) ph1 ) $=
    $(
        apply "rule-imp-transitivity"
        apply "rule-contrapositive"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-3"
    $)
    ( imp-is-pattern bot-is-pattern proof-rule-prop-1 rule-contrapositive proof-rule-prop-3 rule-imp-transitivity ) ADCDCBDCCDCBDCDCBBDCADCDCBDCCBDCADCDCEFBGH $.

not-elim-alt $p |- ( \imp ( \imp ph0 \bot ) ( \imp ph0 ph1 ) ) $=
    $(
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-1"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "bot-elim"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-1"
        apply "imp-reflexivity"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "imp-reflexivity"
    $)
    ( imp-is-pattern bot-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 imp-reflexivity bot-elim ) ADCADCCADCABCCADCADCABCCCADCADCCADCABCCCADCADCABCFADCADBCCCADCADCABCCCADCADBCCADCABCCCCADCADBCCCADCADCABCCCCADCADBCCADCABCCFADBCCADCABCCCADCADBCCADCABCCCCADBCCADCABCCCADCGADBFEEADCDBCCADCADBCCCADCDBCADBCCCCADCDBCCADCADBCCCCADCDBCADBCCFDBCADBCCCADCDBCADBCCCCDBCADBCCCADCGDBCAGEEDBCADCDBCCDBCADCGBIEEEEADCAACCADCADCCADCAACADCCCADCAACCADCADCCCADCAACADCFADCAADCCCADCAACADCCCADCAADCCAACADCCCCADCAADCCCADCAACADCCCCADCAADCCAACADCCFAADCCAACADCCCADCAADCCAACADCCCCAADCCAACADCCCADCGAADFEEADCADCCADCAADCCCADCADCAADCCCCADCADCCADCAADCCCCADCADCAADCCFADCAADCCCADCADCAADCCCCADCAADCCCADCGADCAGEEADCHEEEAACADCAACCAACADCGAHEEE $.

${
    rule-peirce-bot.0 $e |- ( \imp ( \imp ph0 \bot ) ph0 ) $.
    rule-peirce-bot $p |- ph0 $=
        $(
            apply "proof-rule-mp"
            apply "proof-rule-prop-3"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "imp-reflexivity"
            apply "rule-peirce-bot.0"
        $)
        ( imp-is-pattern bot-is-pattern proof-rule-mp proof-rule-prop-3 proof-rule-prop-2 imp-reflexivity ) ADCDCAAFADCACADCDCADCADCCADCACADCDCCADCADGADCHEBEE $.
$}

peirce-bot $p |- ( \imp ( \imp ( \imp ph0 \bot ) ph0 ) ph0 ) $=
    $(
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-3"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "imp-reflexivity"
        apply "imp-reflexivity"
    $)
    ( imp-is-pattern bot-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 imp-reflexivity proof-rule-prop-3 ) ACBABACBCBBACBABABACBABACBCBABBACBABACBCBBACBABABBACBABACBCBAEACBCBABACBABACBCBABBACBCBABACBABFAHDDACBABACBABBACBABACBCBBACBABACBABACBCBBBACBABACBABBACBABACBCBBBACBABACBABACBCBEACBABACBACBBBACBABACBABACBCBBBACBABACBACBBACBABACBCBBBBACBABACBACBBBACBABACBABACBCBBBBACBABACBACBBACBABACBCBBEACBACBBACBABACBCBBBACBABACBACBBACBABACBCBBBBACBACBBACBABACBCBBBACBABFACBACEDDACBACBBACBABACBACBBBACBACBBACBABFACBGDDDACBABGDD $.

${
    rule-peirce.0 $e |- ( \imp ( \imp ph0 ph1 ) ph0 ) $.
    rule-peirce $p |- ph0 $=
        $(
            apply "proof-rule-mp"
            apply "peirce-bot"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "imp-transitivity"
            apply "not-elim-alt"
            apply "rule-peirce.0"
        $)
        ( imp-is-pattern bot-is-pattern proof-rule-mp peirce-bot imp-transitivity not-elim-alt ) AEDADAAGABDADAEDADAEDABDDABDADAEDADDAEDABDAHABIFCFF $.
$}

peirce $p |- ( \imp ( \imp ( \imp ph0 ph1 ) ph0 ) ph0 ) $=
    $(
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "peirce-bot"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "imp-transitivity"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "not-elim-alt"
        apply "imp-reflexivity"
    $)
    ( imp-is-pattern bot-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 peirce-bot imp-transitivity not-elim-alt imp-reflexivity ) ABCACADCACCABCACACABCACADCACACCABCACADCACCABCACACCABCACADCACAFADCACACABCACADCACACCADCACACABCACGAHEEABCACABCACCABCACADCACCABCACABCACADCACCCABCACABCACCABCACADCACCCABCACABCACADCACFABCACADCABCCCABCACABCACADCACCCABCACADCABCCABCACADCACCCCABCACADCABCCCABCACABCACADCACCCCABCACADCABCCABCACADCACCFADCABCCABCACADCACCCABCACADCABCCABCACADCACCCCADCABCCABCACADCACCCABCACGADCABCAIEEADCABCCABCACADCABCCCADCABCCABCACGABJEEEABCACKEE $.

${
    rule-or-elim-alt.0 $e |- ( \imp ph0 ph2 ) $.
    rule-or-elim-alt.1 $e |- ( \imp ph1 ph2 ) $.
    rule-or-elim-alt.2 $e |- ( \imp ( \imp ph0 \bot ) ph1 ) $.
    rule-or-elim-alt $p |- ph2 $=
        $(
            apply "proof-rule-mp"
            apply "peirce-bot"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "imp-transitivity"
            apply "proof-rule-mp"
            apply "contrapositive"
            apply "rule-or-elim-alt.0"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "imp-transitivity"
            apply "rule-or-elim-alt.2"
            apply "rule-or-elim-alt.1"
        $)
        ( imp-is-pattern bot-is-pattern proof-rule-mp imp-transitivity peirce-bot contrapositive ) CHGCGCCKAHGCGCHGCGCHGAHGGAHGCGCHGCGGCHGAHGCJACGCHGAHGGACLDIIBCGAHGCGAHGBGBCGAHGCGGAHGBCJFIEIII $.
$}

${
    rule-or-elim.0 $e |- ( \imp ph0 ph2 ) $.
    rule-or-elim.1 $e |- ( \imp ph1 ph2 ) $.
    rule-or-elim $p |- ( \imp ( \imp ( \imp ph0 \bot ) ph1 ) ph2 ) $=
        $(
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-prop-1"
            apply "peirce-bot"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-prop-1"
            apply "imp-transitivity"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-prop-1"
            apply "contrapositive"
            apply "proof-rule-mp"
            apply "proof-rule-prop-1"
            apply "rule-or-elim.0"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-prop-1"
            apply "imp-transitivity"
            apply "imp-reflexivity"
            apply "proof-rule-mp"
            apply "proof-rule-prop-1"
            apply "rule-or-elim.1"
        $)
        ( imp-is-pattern bot-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 imp-transitivity peirce-bot contrapositive imp-reflexivity ) AGFBFCGFCFFAGFBFCFAGFBFCGFCFCFFAGFBFCGFCFFAGFBFCFFAGFBFCGFCFCICGFCFCFAGFBFCGFCFCFFCGFCFCFAGFBFJCLHHAGFBFAGFCFFAGFBFCGFCFFAGFBFAGFCFCGFCFFFAGFBFAGFCFFAGFBFCGFCFFFAGFBFAGFCFCGFCFIAGFBFCGFAGFFFAGFBFAGFCFCGFCFFFAGFBFCGFAGFFAGFCFCGFCFFFFAGFBFCGFAGFFFAGFBFAGFCFCGFCFFFFAGFBFCGFAGFFAGFCFCGFCFFICGFAGFFAGFCFCGFCFFFAGFBFCGFAGFFAGFCFCGFCFFFFCGFAGFFAGFCFCGFCFFFAGFBFJCGFAGFCKHHAGFBFACFFAGFBFCGFAGFFFAGFBFACFCGFAGFFFFAGFBFACFFAGFBFCGFAGFFFFAGFBFACFCGFAGFFIACFCGFAGFFFAGFBFACFCGFAGFFFFACFCGFAGFFFAGFBFJACMHHACFAGFBFACFFACFAGFBFJDHHHHAGFBFBCFFAGFBFAGFCFFAGFBFBCFAGFCFFFAGFBFBCFFAGFBFAGFCFFFAGFBFBCFAGFCFIAGFBFAGFBFFAGFBFBCFAGFCFFFAGFBFAGFBFBCFAGFCFFFFAGFBFAGFBFFAGFBFBCFAGFCFFFFAGFBFAGFBFBCFAGFCFFIAGFBFBCFAGFCFFFAGFBFAGFBFBCFAGFCFFFFAGFBFBCFAGFCFFFAGFBFJAGFBCKHHAGFBFNHHBCFAGFBFBCFFBCFAGFBFJEHHHH $.
$}

$( proof script omitted since it's too long. to reproduce, apply deduction theorem to the proof script of rule-or-elim twice $)
or-elim $p |- ( \imp ( \imp ph0 ph2 ) ( \imp ( \imp ph1 ph2 ) ( \imp ( \imp ( \imp ph0 \bot ) ph1 ) ph2 ) ) ) $= ( imp-is-pattern bot-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 imp-reflexivity imp-transitivity peirce-bot contrapositive )  $.

${
    rule-and-intro-alt.0 $e |- ph0 $.    
    rule-and-intro-alt $p |- ( \imp ph1 ( \imp ( \imp ( \imp ( \imp ph0 \bot ) \bot ) ( \imp ph1 \bot ) ) \bot ) ) $=
        $(
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "imp-transitivity"
            apply "not-elim"
            apply "proof-rule-mp"
            apply "contrapositive"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "or-elim"
            apply "proof-rule-mp"
            apply "not-elim-alt"
            apply "proof-rule-mp"
            apply "not-elim"
            apply "rule-and-intro-alt.0"
            apply "imp-reflexivity"
        $)
        ( imp-is-pattern bot-is-pattern proof-rule-mp not-elim imp-transitivity contrapositive or-elim not-elim-alt imp-reflexivity ) BEDEDAEDEDBEDDEDDBAEDEDBEDDEDDBBEDEDDBEDEDAEDEDBEDDEDDBAEDEDBEDDEDDDBBEDEDAEDEDBEDDEDHBGFAEDEDBEDDBEDDBEDEDAEDEDBEDDEDDAEDEDBEDDBEDIBEDBEDDAEDEDBEDDBEDDAEDBEDDBEDBEDDAEDEDBEDDBEDDDAEDBEDBEDJAEDEDAEDBEDDAEDBEDKAAEDEDAGCFFFBEDLFFF $.
$}

and-intro $p |- ( \imp ph0 ( \imp ph1 ( \imp ( \imp ( \imp ( \imp ph0 \bot ) \bot ) ( \imp ph1 \bot ) ) \bot ) ) ) $=
    $( omitted. apply deduction theorem to rule-and-intro-alt $)
    ( imp-is-pattern bot-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 not-elim imp-reflexivity imp-transitivity contrapositive or-elim not-elim-alt ) ABDCDCADCDCBDCCDCCCABADCDCBDCCDCCCABDCDCADCDCBDCCDCCBADCDCBDCCDCCCCABDCDCADCDCBDCCDCCCABADCDCBDCCDCCCCABDCDCADCDCBDCCDCCBADCDCBDCCDCCFABBDCDCCCABDCDCADCDCBDCCDCCBADCDCBDCCDCCCCABBDCDCCBDCDCADCDCBDCCDCCBADCDCBDCCDCCCCCABBDCDCCCABDCDCADCDCBDCCDCCBADCDCBDCCDCCCCCABBDCDCCBDCDCADCDCBDCCDCCBADCDCBDCCDCCCFBBDCDCCBDCDCADCDCBDCCDCCBADCDCBDCCDCCCCABBDCDCCBDCDCADCDCBDCCDCCBADCDCBDCCDCCCCCBBDCDCCBDCDCADCDCBDCCDCCBADCDCBDCCDCCCCAGBBDCDCADCDCBDCCDCJEEBBDCDCCABBDCDCCCBBDCDCCAGBHEEEAADCDCBDCCBDCCCABDCDCADCDCBDCCDCCCAADCDCBDCCBDCCBDCDCADCDCBDCCDCCCCAADCDCBDCCBDCCCABDCDCADCDCBDCCDCCCCAADCDCBDCCBDCCBDCDCADCDCBDCCDCCFADCDCBDCCBDCCBDCDCADCDCBDCCDCCCAADCDCBDCCBDCCBDCDCADCDCBDCCDCCCCADCDCBDCCBDCCBDCDCADCDCBDCCDCCCAGADCDCBDCCBDCKEEABDCBDCCCAADCDCBDCCBDCCCABDCBDCCADCDCBDCCBDCCCCABDCBDCCCAADCDCBDCCBDCCCCABDCBDCCADCDCBDCCBDCCFAADCBDCCCABDCBDCCADCDCBDCCBDCCCCAADCBDCCBDCBDCCADCDCBDCCBDCCCCCAADCBDCCCABDCBDCCADCDCBDCCBDCCCCCAADCBDCCBDCBDCCADCDCBDCCBDCCCFADCBDCCBDCBDCCADCDCBDCCBDCCCCAADCBDCCBDCBDCCADCDCBDCCBDCCCCCADCBDCCBDCBDCCADCDCBDCCBDCCCCAGADCBDCBDCLEEAADCDCCAADCBDCCCAADCDCADCBDCCCCAADCDCCAADCBDCCCCAADCDCADCBDCCFADCDCADCBDCCCAADCDCADCBDCCCCADCDCADCBDCCCAGADCBDCMEEAACAADCDCCAAADCDCCCAACAADCDCCCAAADCDCFAADCDCCAAADCDCCCAADCDCCAGAHEEAIEEEEBDCBDCCABDCBDCCCBDCBDCCAGBDCIEEEE $.

${
    rule-and-intro.0 $e |- ph0 $.
    rule-and-intro.1 $e |- ph1 $.
    rule-and-intro $p |- ( \imp ( \imp ( \imp ( \imp ph0 \bot ) \bot ) ( \imp ph1 \bot ) ) \bot ) $=
        $(
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "and-intro"
            apply "rule-and-intro.0"
            apply "rule-and-intro.1"
        $)
        ( imp-is-pattern bot-is-pattern proof-rule-mp and-intro ) BAFEFEBFEEFEABAFEFEBFEEFEEABHCGDG $.
$}

$(
    Sugared versions of natural proof rules
$)

and-elim-left-sugar $p |- ( \imp ( \and ph0 ph1 ) ph0 ) $=
    $(
        desugar-all
        apply "and-elim-left"
    $)
    ( imp-is-pattern bot-is-pattern not-is-pattern notation-symmetry or-is-pattern notation-transitivity notation-reflexivity not-is-sugar notation-imp and-is-pattern and-elim-left and-is-sugar or-is-sugar notation-proof ) ADCDCBDCCDCACABLACABMABLAADCDCBDCCDCAABLAEBEGEADCDCBDCCDCABNADCDCBDCCDCAEBEGEAEBEGEADCDCBDCCDCAEBEGEAEBEGDCADCDCBDCCDCAEBEGJADCDCBDCCDCAEBEGDCADCDCBDCCDAEBEGDAEBEGADCDCBDCCAEBEGAEEBECADCDCBDCCAEBEOADCDCBDCCAEEBECADCDCBDCAEEBEAEEADCDCAEEAEDCADCDCAEJADCDCAEDCADCDAEDAEADCAEADCADCAJADCADCADCIFHFDIKFHFBEBDCBEBDCBDCBJBDCBDCBDCIFHFKFHFDIKFHFFHAIKP $.


and-elim-right-sugar $p |- ( \imp ( \and ph0 ph1 ) ph1 ) $=
    $(
        desugar-all
        apply "and-elim-right"
    $)
    ( imp-is-pattern bot-is-pattern not-is-pattern notation-symmetry or-is-pattern notation-transitivity notation-reflexivity not-is-sugar notation-imp and-is-pattern and-elim-right and-is-sugar or-is-sugar notation-proof ) ADCDCBDCCDCBCABLBCABMABLBADCDCBDCCDCBABLAEBEGEADCDCBDCCDCABNADCDCBDCCDCAEBEGEAEBEGEADCDCBDCCDCAEBEGEAEBEGDCADCDCBDCCDCAEBEGJADCDCBDCCDCAEBEGDCADCDCBDCCDAEBEGDAEBEGADCDCBDCCAEBEGAEEBECADCDCBDCCAEBEOADCDCBDCCAEEBECADCDCBDCAEEBEAEEADCDCAEEAEDCADCDCAEJADCDCAEDCADCDAEDAEADCAEADCADCAJADCADCADCIFHFDIKFHFBEBDCBEBDCBDCBJBDCBDCBDCIFHFKFHFDIKFHFFHBIKP $.

and-intro-sugar $p |- ( \imp ph0 ( \imp ph1 ( \and ph0 ph1 ) ) ) $=
    $(
        desugar-all
        apply "and-intro"
    $)
    ( imp-is-pattern bot-is-pattern not-is-pattern notation-symmetry or-is-pattern notation-reflexivity notation-transitivity notation-imp and-is-pattern not-is-sugar and-intro and-is-sugar or-is-sugar notation-proof ) ABADCDCBDCCDCCCABABKCCABMABABKCABADCDCBDCCDCCAHBABKBADCDCBDCCDCBHABKAEBEGEADCDCBDCCDCABNADCDCBDCCDCAEBEGEAEBEGEADCDCBDCCDCAEBEGEAEBEGDCADCDCBDCCDCAEBEGLADCDCBDCCDCAEBEGDCADCDCBDCCDAEBEGDAEBEGADCDCBDCCAEBEGAEEBECADCDCBDCCAEBEOADCDCBDCCAEEBECADCDCBDCAEEBEAEEADCDCAEEAEDCADCDCAELADCDCAEDCADCDAEDAEADCAEADCADCALADCADCADCHFIFDHJFIFBEBDCBEBDCBDCBLBDCBDCBDCHFIFJFIFDHJFIFFIJJP $.

${
    rule-and-intro-sugar.0 $e |- ph0 $.
    rule-and-intro-sugar.1 $e |- ph1 $.
    rule-and-intro-sugar $p |- ( \and ph0 ph1 ) $=
        $(
            desugar-all
            apply "rule-and-intro"
            apply "rule-and-intro-sugar.0"
            apply "rule-and-intro-sugar.1"
        $)
        ( imp-is-pattern bot-is-pattern not-is-pattern notation-symmetry or-is-pattern notation-transitivity not-is-sugar notation-reflexivity notation-imp and-is-pattern rule-and-intro and-is-sugar or-is-sugar notation-proof ) AFEFEBFEEFEABNABCDOABNAGBGIGAFEFEBFEEFEABPAFEFEBFEEFEAGBGIGAGBGIGAFEFEBFEEFEAGBGIGAGBGIFEAFEFEBFEEFEAGBGIKAFEFEBFEEFEAGBGIFEAFEFEBFEEFAGBGIFAGBGIAFEFEBFEEAGBGIAGGBGEAFEFEBFEEAGBGQAFEFEBFEEAGGBGEAFEFEBFEAGGBGAGGAFEFEAGGAGFEAFEFEAGKAFEFEAGFEAFEFAGFAGAFEAGAFEAFEAKAFEAFEAFELHJHFLMHJHBGBFEBGBFEBFEBKBFEBFEBFELHJHMHJHFLMHJHHJR $.
$}

${
    rule-and-intro-alt2-sugar.0 $e |- ( \imp ph0 ph1 ) $.
    rule-and-intro-alt2-sugar.1 $e |- ( \imp ph0 ph2 ) $.
    rule-and-intro-alt2-sugar $p |- ( \imp ph0 ( \and ph1 ph2 ) ) $=
        $(
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-prop-1"
            apply "and-intro-sugar"
            apply "rule-and-intro-alt2-sugar.0"
            apply "rule-and-intro-alt2-sugar.1"
        $)
        ( imp-is-pattern and-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 and-intro-sugar ) ACFABCGFACBCGFFACFABCGFFACBCGIABFACBCGFFABCBCGFFFABFACBCGFFFABCBCGFIBCBCGFFABCBCGFFFBCBCGFFAJBCKHHDHHEH $.
$}

or-intro-left-sugar $p |- ( \imp ph0 ( \or ph0 ph1 ) ) $=
    $(
        desugar-all
        apply "or-intro-left"
    $)
    ( imp-is-pattern bot-is-pattern not-is-pattern or-is-pattern notation-reflexivity notation-symmetry notation-transitivity notation-imp or-intro-left or-is-sugar not-is-sugar notation-proof ) AADCBCCAABFCABKAABFAADCBCAGABFAEBCADCBCABLADCBCAEBCADCBAEBAEADCAEADCADCAMADCADCADCGHIHBGJHIJN $.

or-intro-right-sugar $p |- ( \imp ph0 ( \or ph1 ph0 ) ) $=
    $(
        desugar-all
        apply "proof-rule-prop-1"
    $)
    ( imp-is-pattern bot-is-pattern not-is-pattern or-is-pattern notation-reflexivity notation-symmetry notation-transitivity notation-imp proof-rule-prop-1 or-is-sugar not-is-sugar notation-proof ) ABDCACCABAFCABDCKABAFABDCACAGBAFBEACBDCACBALBDCACBEACBDCABEABEBDCBEBDCBDCBMBDCBDCBDCGHIHAGJHIJN $.

${
    rule-or-elim-alt-sugar.0 $e |- ( \imp ph0 ph2 ) $.
    rule-or-elim-alt-sugar.1 $e |- ( \imp ph1 ph2 ) $.
    rule-or-elim-alt-sugar.2 $e |- ( \or ph0 ph1 ) $.
    rule-or-elim-alt-sugar $p |- ph2 $=
        $(
            apply "rule-or-elim-alt"
            apply "rule-or-elim-alt-sugar.0"
            apply "rule-or-elim-alt-sugar.1"
            apply "notation-proof"
            let $3 = "( \or ph0 ph1 )"
            apply "rule-or-elim-alt-sugar.2"
            notation
        $)
        ( imp-is-pattern bot-is-pattern not-is-pattern notation-symmetry or-is-pattern notation-reflexivity notation-transitivity or-is-sugar not-is-sugar notation-imp notation-proof rule-or-elim-alt ) ABCDEABKAHGBGFABKAHGBGABKAIBGAHGBGABNAHGBGAIBGAHGBAIBAIAHGAIAHGAHGAOAHGAHGAHGLJMJBLPJMJQR $.
$}

${
    rule-or-elim-sugar.0 $e |- ( \imp ph0 ph2 ) $.
    rule-or-elim-sugar.1 $e |- ( \imp ph1 ph2 ) $.
    rule-or-elim-sugar $p |- ( \imp ( \or ph0 ph1 ) ph2 ) $=
        $(
            desugar-all
            apply "rule-or-elim"
            apply "rule-or-elim-sugar.0"
            apply "rule-or-elim-sugar.1"
        $)
        ( imp-is-pattern bot-is-pattern not-is-pattern or-is-pattern notation-reflexivity notation-symmetry notation-transitivity notation-imp rule-or-elim or-is-sugar not-is-sugar notation-proof ) AGFBFCFABICFABCDENABICAGFBFCABIAHBFAGFBFABOAGFBFAHBFAGFBAHBAHAGFAHAGFAGFAPAGFAGFAGFJKLKBJMKLCJMQ $.
$}

or-elim-sugar $p |- ( \imp ( \imp ph0 ph2 ) ( \imp ( \imp ph1 ph2 ) ( \imp ( \or ph0 ph1 ) ph2 ) ) ) $=
    $(
        desugar-all
        apply "or-elim"
    $)
    ( imp-is-pattern bot-is-pattern or-is-pattern notation-reflexivity not-is-pattern notation-imp notation-symmetry notation-transitivity or-elim or-is-sugar not-is-sugar notation-proof ) ACDBCDAEDBDCDDDACDBCDABFCDDDABCLACDBCDABFCDDACDBCDAEDBDCDDACDGBCDABFCDBCDAEDBDCDBCDGABFCAEDBDCABFAHBDAEDBDABMAEDBDAHBDAEDBAHBAHAEDAHAEDAEDANAEDAEDAEDGJKJBGIJKCGIIIO $.

${
    rule-contradiction.0 $e |- ( \imp ( \not ph0 ) \bot ) $.
    rule-contradiction $p |- ph0 $=
        $(
            apply "proof-rule-mp"
            apply "contradiction"
            apply "rule-contradiction.0"
        $)
        ( not-is-pattern bot-is-pattern imp-is-pattern contradiction proof-rule-mp ) ACDEAAFBG $.
$}

${
    rule-bot-elim.0 $e |- \bot $.
    rule-bot-elim $p |- ph0 $=
        $(
            apply "proof-rule-mp"
            apply "bot-elim"
            apply "rule-bot-elim.0"
        $)
        ( bot-is-pattern bot-elim proof-rule-mp ) CAADBE $.
$}

${
    rule-not-elim-sugar.0 $e |- ph0 $.
    rule-not-elim-sugar.1 $e |- ( \not ph0 ) $.
    rule-not-elim-sugar $p |- \bot $=
        $(
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "not-elim"
            apply "rule-not-elim-sugar.0"
            apply "notation-proof"
            let $5 = "( \not ph0 )"
            apply "rule-not-elim-sugar.1"
            notation
        $)
        ( bot-is-pattern imp-is-pattern not-is-pattern proof-rule-mp notation-symmetry not-elim not-is-sugar notation-reflexivity notation-transitivity notation-proof ) ADEDAADEDEAIBGAFADECAFADEAFADEADEAJADEADEADEKHLHMG $.
$}

${
    rule-iff-intro.0 $e |- ( \imp ph0 ph1 ) $.
    rule-iff-intro.1 $e |- ( \imp ph1 ph0 ) $.
    rule-iff-intro $p |- ( \iff ph0 ph1 ) $=
        $(
            desugar "\iff"
            apply "rule-and-intro-sugar"
            apply "rule-iff-intro.0"
            apply "rule-iff-intro.1"
        $)
        ( imp-is-pattern and-is-pattern iff-is-pattern rule-and-intro-sugar iff-is-sugar notation-reflexivity notation-symmetry notation-transitivity notation-proof ) ABEBAEFABGABEBAECDHABGABEBAEFABEBAEFABIABEBAEFABEBAEFABEBAEFJKLM $.
$}

contrapositive-sugar $p |- ( \imp ( \imp ph0 ph1 ) ( \imp ( \not ph1 ) ( \not ph0 ) ) ) $=
    $(
        desugar-all
        apply "contrapositive"
    $)
    ( imp-is-pattern bot-is-pattern not-is-pattern notation-reflexivity not-is-sugar notation-symmetry notation-transitivity notation-imp contrapositive notation-proof ) ABCBDCADCCCABCBEAECCABKABCBEAECABCBDCADCCABCFBEAEBDCADCBEBDCBDCBGBDCBDCBDCFHIAEADCADCAGADCADCADCFHIJJL $.

${
    rule-contrapositive-sugar.0 $e |- ( \imp ph0 ph1 ) $.
    rule-contrapositive-sugar $p |- ( \imp ( \not ph1 ) ( \not ph0 ) ) $=
        $(
            desugar-all
            apply "rule-contrapositive"
            apply "rule-contrapositive-sugar.0"
        $)
        ( imp-is-pattern bot-is-pattern not-is-pattern not-is-sugar notation-reflexivity notation-symmetry notation-transitivity rule-contrapositive notation-imp notation-proof ) BEDAEDDBFAFDABCKBFAFBEDAEDBFBEDBEDBGBEDBEDBEDHIJAFAEDAEDAGAEDAEDAEDHIJLM $.
$}

${
    rule-contrapositive-alt-sugar.0 $e |- ( \imp ( \not ph0 ) ( \not ph1 ) ) $.
    rule-contrapositive-alt-sugar $p |- ( \imp ph1 ph0 ) $=
        $(
            apply "rule-imp-transitivity"
            apply "rule-imp-transitivity"
            apply "not-elim"
            meh
            apply "proof-rule-prop-3"
            apply "rule-contrapositive"
            apply "notation-proof"
            let $10 = "( \imp ( \not ph0 ) ( \not ph1 ) )"
            apply "rule-contrapositive-alt-sugar.0"
            notation
        $)
        ( imp-is-pattern bot-is-pattern not-is-pattern notation-symmetry not-is-sugar notation-reflexivity notation-transitivity rule-imp-transitivity not-elim notation-imp notation-proof rule-contrapositive proof-rule-prop-3 ) BAEDEDABBEDEDAEDEDBLAEDBEDAFBFDAEDBEDDCAEDBEDAFBFAFAEDAFAEDAEDAHAEDAEDAEDIGJGBFBEDBFBEDBEDBHBEDBEDBEDIGJGMNOKAPK $.
$}

excluded-middle $p |- ( \or ph0 ( \not ph0 ) ) $=
    $(
        desugar "\or"
        apply "imp-reflexivity"
    $)
    ( not-is-pattern imp-is-pattern or-is-pattern imp-reflexivity or-is-sugar notation-reflexivity notation-symmetry notation-transitivity notation-proof ) ABABCAABDABEAABDABABCABABCAABFABABCABABCABABCGHIJ $.

case $p |- ( \imp ( \imp ph0 ph1 ) ( \imp ( \imp ( \not ph0 ) ph1 ) ph1 ) ) $=
    $( proof script: apply deduction twice to rule-case $)
    ( imp-is-pattern not-is-pattern or-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 imp-reflexivity or-elim-sugar excluded-middle ) ABCADBCAADECCABCADBCBCCABCADBCAADECADBCBCCCABCADBCAADECCABCADBCBCCCABCADBCAADECADBCBCGABCADBCAADEBCCCABCADBCAADECADBCBCCCABCADBCAADEBCCADBCAADECADBCBCCCCABCADBCAADEBCCCABCADBCAADECADBCBCCCCABCADBCAADEBCCADBCAADECADBCBCCGADBCAADEBCCADBCAADECADBCBCCCABCADBCAADEBCCADBCAADECADBCBCCCCADBCAADEBCCADBCAADECADBCBCCCABCHADBCAADEBGFFABCADBCADBCCCABCADBCAADEBCCCABCADBCADBCCADBCAADEBCCCCABCADBCADBCCCABCADBCAADEBCCCCABCADBCADBCCADBCAADEBCCGABCADBCADBCAADEBCCCCABCADBCADBCCADBCAADEBCCCCABCADBCADBCAADEBCCCADBCADBCCADBCAADEBCCCCCABCADBCADBCAADEBCCCCABCADBCADBCCADBCAADEBCCCCCABCADBCADBCAADEBCCCADBCADBCCADBCAADEBCCCGADBCADBCAADEBCCCADBCADBCCADBCAADEBCCCCABCADBCADBCAADEBCCCADBCADBCCADBCAADEBCCCCCADBCADBCAADEBCCCADBCADBCCADBCAADEBCCCCABCHADBCADBCAADEBCGFFABCADBCABCCCABCADBCADBCAADEBCCCCABCADBCABCCADBCADBCAADEBCCCCCABCADBCABCCCABCADBCADBCAADEBCCCCCABCADBCABCCADBCADBCAADEBCCCGABCADBCABCADBCAADEBCCCCCABCADBCABCCADBCADBCAADEBCCCCCABCADBCABCADBCAADEBCCCCADBCABCCADBCADBCAADEBCCCCCCABCADBCABCADBCAADEBCCCCCABCADBCABCCADBCADBCAADEBCCCCCCABCADBCABCADBCAADEBCCCCADBCABCCADBCADBCAADEBCCCCGADBCABCADBCAADEBCCCCADBCABCCADBCADBCAADEBCCCCCABCADBCABCADBCAADEBCCCCADBCABCCADBCADBCAADEBCCCCCCADBCABCADBCAADEBCCCCADBCABCCADBCADBCAADEBCCCCCABCHADBCABCADBCAADEBCCGFFABCABCADBCAADEBCCCCABCADBCABCADBCAADEBCCCCCABCABCADBCAADEBCCCADBCABCADBCAADEBCCCCCCABCABCADBCAADEBCCCCABCADBCABCADBCAADEBCCCCCCABCABCADBCAADEBCCCADBCABCADBCAADEBCCCCGABCADBCAADEBCCCADBCABCADBCAADEBCCCCCABCABCADBCAADEBCCCADBCABCADBCAADEBCCCCCCABCADBCAADEBCCCADBCABCADBCAADEBCCCCCABCHABCADBCAADEBCCCADBCHFFABCADBCAADEBCCCABCABCADBCAADEBCCCCABCADBCAADEBCCCABCHAADBJFFFFABCABCCABCADBCABCCCABCABCADBCABCCCCABCABCCABCADBCABCCCCABCABCADBCABCCGABCADBCABCCCABCABCADBCABCCCCABCADBCABCCCABCHABCADBCHFFABCIFFFFADBCADBCCABCADBCADBCCCADBCADBCCABCHADBCIFFFFABCAADECABCADBCAADECCABCAADEADBCAADECCCABCAADECABCADBCAADECCCABCAADEADBCAADECGAADEADBCAADECCABCAADEADBCAADECCCAADEADBCAADECCABCHAADEADBCHFFAADEABCAADECAADEABCHAKFFF $.

${
    rule-case.0 $e |- ( \imp ph0 ph1 ) $.
    rule-case.1 $e |- ( \imp ( \not ph0 ) ph1 ) $.
    rule-case $p |- ph1 $=
        $(
            apply "rule-or-elim-alt-sugar"
            apply "rule-case.0"
            apply "rule-case.1"
            apply "excluded-middle"
        $)
        ( not-is-pattern imp-is-pattern or-is-pattern imp-reflexivity or-is-sugar notation-reflexivity notation-symmetry notation-transitivity notation-proof rule-or-elim-alt-sugar ) AAEBCDAEAEFAAEGAEHAAEGAEAEFAEAEFAAEIAEAEFAEAEFAEAEFJKLMN $.
$}

${
    rule-case-alt.0 $e |- ( \or ph0 ph1 ) $.
    rule-case-alt.1 $e |- ( \imp ph0 ph2 ) $.
    rule-case-alt.2 $e |- ( \imp ph1 ph2 ) $.
    rule-case-alt $p |- ph2 $=
        $(
            apply "proof-rule-mp"
            apply "rule-or-elim-sugar"
            apply "rule-case-alt.1"
            apply "rule-case-alt.2"
            apply "rule-case-alt.0"
        $)
        ( or-is-pattern rule-or-elim-sugar proof-rule-mp ) ABGCABCEFHDI $.
$}

$(
    Lemmas used for the `tautology` auto tactic
$)

${
    rule-imp-compat-in-or.0 $e |- ( \imp ph0 ph1 ) $.
    rule-imp-compat-in-or.1 $e |- ( \imp ph2 ph3 ) $.
    rule-imp-compat-in-or $p |- ( \imp ( \or ph0 ph2 ) ( \or ph1 ph3 ) ) $=
        $(
            apply "rule-or-elim-sugar"
            apply "rule-imp-transitivity"
            apply "rule-imp-compat-in-or.0"
            apply "or-intro-left-sugar"
            apply "rule-imp-transitivity"
            apply "rule-imp-compat-in-or.1"
            apply "or-intro-right-sugar"
        $)
        ( or-is-pattern rule-imp-transitivity or-intro-left-sugar or-intro-right-sugar rule-or-elim-sugar ) ACBDGABBDGEBDIHCDBDGFDBJHK $.
$}

${
    rule-imp-compat-in-and.0 $e |- ( \imp ph0 ph1 ) $.
    rule-imp-compat-in-and.1 $e |- ( \imp ph2 ph3 ) $.
    rule-imp-compat-in-and $p |- ( \imp ( \and ph0 ph2 ) ( \and ph1 ph3 ) ) $=
        $(
            desugar "\and"
            apply "rule-contrapositive-sugar"
            apply "rule-imp-compat-in-or"
            apply "rule-contrapositive-sugar"
            apply "rule-imp-compat-in-and.0"
            apply "rule-contrapositive-sugar"
            apply "rule-imp-compat-in-and.1"
        $)
        ( not-is-pattern or-is-pattern and-is-pattern rule-contrapositive-sugar imp-is-pattern and-is-sugar notation-reflexivity notation-symmetry notation-transitivity rule-imp-compat-in-or notation-imp notation-proof ) AGCGHGBGDGHGKACIBDIKBGDGHAGCGHBGAGDGCGABEJCDFJPJACIBDIAGCGHGBGDGHGACIAGCGHGAGCGHGACLAGCGHGAGCGHGAGCGHGMNOBDIBGDGHGBGDGHGBDLBGDGHGBGDGHGBGDGHGMNOQR $.
$}

iff-elim-left $p |- ( \imp ( \iff ph0 ph1 ) ( \imp ph0 ph1 ) ) $=
    $(
        desugar "\iff"
        apply "and-elim-left-sugar"
    $)
    ( imp-is-pattern and-is-pattern iff-is-pattern notation-reflexivity and-elim-left-sugar iff-is-sugar notation-symmetry notation-transitivity notation-imp notation-proof ) ABCBACDABCCABEABCCABCBACGABEABCABCBACDABCABEABCBACDABCBACDABHABCBACDABCBACDABCBACDFIJABCFKL $.

iff-elim-right $p |- ( \imp ( \iff ph0 ph1 ) ( \imp ph1 ph0 ) ) $=
    $(
        desugar "\iff"
        apply "and-elim-right-sugar"
    $)
    ( imp-is-pattern and-is-pattern iff-is-pattern notation-reflexivity and-elim-right-sugar iff-is-sugar notation-symmetry notation-transitivity notation-imp notation-proof ) ABCBACDBACCABEBACCABCBACGABEBACABCBACDBACABEABCBACDABCBACDABHABCBACDABCBACDABCBACDFIJBACFKL $.

${
    rule-iff-elim-left.0 $e |- ( \iff ph0 ph1 ) $.
    rule-iff-elim-left $p |- ( \imp ph0 ph1 ) $=
        $(
            apply "proof-rule-mp"
            apply "and-elim-left-sugar"
            let $3 = "( \imp ph1 ph0 )"
            apply "notation-proof"
            let $4 = "( \iff ph0 ph1 )"
            apply "rule-iff-elim-left.0"
            notation
        $)
        ( imp-is-pattern not-is-pattern or-is-pattern bot-is-pattern and-is-pattern notation-symmetry notation-transitivity iff-is-pattern and-is-sugar not-is-sugar and-elim-left-sugar iff-is-sugar notation-reflexivity notation-proof proof-rule-mp ) ABDBADHABDABDBADNABKABDBADHCABDBADHABDEBADEFEABKABDBADLABKABDEBADEFEABKABDBADHABDEBADEFEABOABDEBADEFEABDBADHABDEBADEFEABDEBADEFGDABDBADHABDEBADEFMABDBADHABDEBADEFGDABDBADHABDEBADEFEABDEBADEFGDABDBADLABDEBADEFGDABDEBADEFEABDEBADEFEABDEBADEFGDABDEBADEFEABDEBADEFGDABDEBADEFGDABDEBADEFMABDEBADEFGDABDEBADEFGDABDEBADEFGDPIJIIJIJIJIJQR $.
$}

${
    rule-iff-elim-right.0 $e |- ( \iff ph0 ph1 ) $.
    rule-iff-elim-right $p |- ( \imp ph1 ph0 ) $=
        $(
            apply "proof-rule-mp"
            apply "and-elim-right-sugar"
            let $2 = "( \imp ph0 ph1 )"
            apply "notation-proof"
            let $4 = "( \iff ph0 ph1 )"
            apply "rule-iff-elim-right.0"
            notation
        $)
        ( imp-is-pattern not-is-pattern or-is-pattern bot-is-pattern and-is-pattern notation-symmetry notation-transitivity iff-is-pattern and-is-sugar not-is-sugar and-elim-right-sugar iff-is-sugar notation-reflexivity notation-proof proof-rule-mp ) ABDBADHBADABDBADNABKABDBADHCABDBADHABDEBADEFEABKABDBADLABKABDEBADEFEABKABDBADHABDEBADEFEABOABDEBADEFEABDBADHABDEBADEFEABDEBADEFGDABDBADHABDEBADEFMABDBADHABDEBADEFGDABDBADHABDEBADEFEABDEBADEFGDABDBADLABDEBADEFGDABDEBADEFEABDEBADEFEABDEBADEFGDABDEBADEFEABDEBADEFGDABDEBADEFGDABDEBADEFMABDEBADEFGDABDEBADEFGDABDEBADEFGDPIJIIJIJIJIJQR $.
$}

iff-reflexivity $p |- ( \iff ph0 ph0 ) $=
    $(
        apply "rule-iff-intro"
        apply "imp-reflexivity"
        apply "imp-reflexivity"
    $)
    ( imp-reflexivity rule-iff-intro ) AAABABC $.

${
    rule-iff-symmetry.0 $e |- ( \iff ph0 ph1 ) $.
    rule-iff-symmetry $p |- ( \iff ph1 ph0 ) $=
        $(
            apply "rule-iff-intro"
            apply "rule-iff-elim-right"
            apply "rule-iff-symmetry.0"
            apply "rule-iff-elim-left"
            apply "rule-iff-symmetry.0"
        $)
        ( rule-iff-elim-right rule-iff-elim-left rule-iff-intro ) BAABCDABCEF $.
$}

${
    rule-iff-transitivity.0 $e |- ( \iff ph0 ph1 ) $.
    rule-iff-transitivity.1 $e |- ( \iff ph1 ph2 ) $.
    rule-iff-transitivity $p |- ( \iff ph0 ph2 ) $=
        $(
            apply "rule-iff-intro"
            apply "rule-imp-transitivity"
            apply "rule-iff-elim-left"
            apply "rule-iff-transitivity.0"
            apply "rule-iff-elim-left"
            apply "rule-iff-transitivity.1"
            apply "rule-imp-transitivity"
            apply "rule-iff-elim-right"
            apply "rule-iff-transitivity.1"
            apply "rule-iff-elim-right"
            apply "rule-iff-transitivity.0"
        $)
        ( rule-iff-elim-left rule-imp-transitivity rule-iff-elim-right rule-iff-intro ) ACABCABDFBCEFGCBABCEHABDHGI $.
$}

${
    rule-iff-compat-in-or.0 $e |- ( \iff ph0 ph1 ) $.
    rule-iff-compat-in-or.1 $e |- ( \iff ph2 ph3 ) $.
    rule-iff-compat-in-or $p |- ( \iff ( \or ph0 ph2 ) ( \or ph1 ph3 ) ) $=
        $(
            apply "rule-iff-intro"
            apply "rule-imp-compat-in-or"
            apply "rule-iff-elim-left"
            apply "rule-iff-compat-in-or.0"
            apply "rule-iff-elim-left"
            apply "rule-iff-compat-in-or.1"
            apply "rule-imp-compat-in-or"
            apply "rule-iff-elim-right"
            apply "rule-iff-compat-in-or.0"
            apply "rule-iff-elim-right"
            apply "rule-iff-compat-in-or.1"
        $)
        ( or-is-pattern rule-iff-elim-left rule-imp-compat-in-or rule-iff-elim-right rule-iff-intro ) ACGBDGABCDABEHCDFHIBADCABEJCDFJIK $.
$}

${
    rule-iff-compat-in-and.0 $e |- ( \iff ph0 ph1 ) $.
    rule-iff-compat-in-and.1 $e |- ( \iff ph2 ph3 ) $.
    rule-iff-compat-in-and $p |- ( \iff ( \and ph0 ph2 ) ( \and ph1 ph3 ) ) $=
        $(
            apply "rule-iff-intro"
            apply "rule-imp-compat-in-and"
            apply "rule-iff-elim-left"
            apply "rule-iff-compat-in-and.0"
            apply "rule-iff-elim-left"
            apply "rule-iff-compat-in-and.1"
            apply "rule-imp-compat-in-and"
            apply "rule-iff-elim-right"
            apply "rule-iff-compat-in-and.0"
            apply "rule-iff-elim-right"
            apply "rule-iff-compat-in-and.1"
        $)
        ( and-is-pattern rule-iff-elim-left rule-imp-compat-in-and rule-iff-elim-right rule-iff-intro ) ACGBDGABCDABEHCDFHIBADCABEJCDFJIK $.
$}

${
    rule-iff-compat-in-not.0 $e |- ( \iff ph0 ph1 ) $.
    rule-iff-compat-in-not $p |- ( \iff ( \not ph0 ) ( \not ph1 ) ) $=
        $(
            apply "rule-iff-intro"
            apply "rule-contrapositive-sugar"
            apply "rule-iff-elim-right"
            apply "rule-iff-compat-in-not.0"
            apply "rule-contrapositive-sugar"
            apply "rule-iff-elim-left"
            apply "rule-iff-compat-in-not.0"
        $)
        ( not-is-pattern rule-contrapositive-sugar rule-iff-elim-right rule-iff-elim-left rule-iff-intro ) ADBDBAABCFEABABCGEH $.
$}

double-negation $p |- ( \iff ( \not ( \not ph0 ) ) ph0 ) $=
    $(
        desugar "\not"
        apply "rule-iff-intro"
        apply "proof-rule-prop-3"
        apply "not-elim"
    $)
    ( imp-is-pattern not-is-pattern bot-is-pattern or-is-pattern notation-symmetry notation-transitivity not-is-sugar and-is-pattern notation-reflexivity notation-imp iff-is-pattern iff-is-sugar and-is-sugar or-is-sugar proof-rule-prop-3 not-elim rule-iff-intro notation-proof ) ADBDBALACCALADBDBAAPAQRACCALACCABAACCBIADBDBALACCAMADBDBALACCABAACCBIADBDBALADBDBABAADBDBBIACCABAACCBIADBDBAMACCABAACCBIADBDBABAADBDBBIACCABAACCBIACCABCAACCBCECADBDBABAADBDBBIACCABAACCBNADBDBABAADBDBBIACCABCAACCBCECADBDBABAADBDBBIADBDBABCAADBDBBCECACCABCAACCBCECADBDBABAADBDBBNACCABCAACCBCECADBDBABCAADBDBBCECACCABCAACCBCECACCABCAACCBCEDBADBDBABCAADBDBBCECACCABCAACCBCEHADBDBABCAADBDBBCECACCABCAACCBCEDBADBDBABCAADBDBBCECADBDBABCAADBDBBCEDBACCABCAACCBCEDBADBDBABCAADBDBBCEHACCABCAACCBCEDBADBDBABCAADBDBBCEDBACCABCAACCBCEDADBDBABCAADBDBBCEDACCABCAACCBCEACCABCCAACCBCBADBDBABCAADBDBBCEACCABCAACCBCOADBDBABCAADBDBBCEACCABCCAACCBCBADBDBABCAADBDBBCEADBDBABCCAADBDBBCBACCABCCAACCBCBADBDBABCAADBDBBCOACCABCCAACCBCBADBDBABCCAADBDBBCBACCABCCAACCBCADBDBABCCAADBDBBCACCABCCACCABCDBADBDBABCCACCABCHADBDBABCCACCABCDBADBDBABCCADBDBABCDBACCABCDBADBDBABCHACCABCDBADBDBABCDBACCABCDADBDBABCDACCABCACCABDBADBDBABCACCABHADBDBABCACCABDBADBDBABCADBDBABDBACCABDBADBDBABHACCABDBADBDBABDBACCABDADBDBABDACCAADBDBAACCACDBADBDBACHADBDBACDBADBDACDACADBACADBADBAHADBADBADBJFGFDJKFGAJKDJKFGFGDJKFGFGAACCBCAACCBDBAADBDBBCAACCBHAADBDBBCAACCBDBAADBDBBCAADBDBBDBAACCBDBAADBDBBHAACCBDBAADBDBBDBAACCBDAADBDBBDAACCAADBDBAJACCACDBADBDBACHADBDBACDBADBDACDACADBACADBADBAHADBADBADBJFGFDJKFGKDJKFGFGKFGFGDJKFGFGFGFGFGFGS $.

dn-intro-sugar $p |- ( \imp ph0 ( \not ( \not ph0 ) ) ) $=
    $(
        apply "rule-iff-elim-right"
        apply "double-negation"
    $)
    ( not-is-pattern double-negation rule-iff-elim-right ) ABBAACD $.

dn-elim-sugar $p |- ( \imp ( \not ( \not ph0 ) ) ph0 ) $=
    $(
        apply "rule-iff-elim-left"
        apply "double-negation"
    $)
    ( not-is-pattern double-negation rule-iff-elim-left ) ABBAACD $.

imp-to-or $p |- ( \iff ( \imp ph0 ph1 ) ( \or ( \not ph0 ) ph1 ) ) $=
    $(
        apply "rule-iff-intro"
        desugar "\or"
        apply "proof-rule-mp"
        apply "imp-transitivity"
        desugar "\not"
        apply "proof-rule-prop-3"
        apply "rule-or-elim-sugar"
        desugar "\not"
        apply "not-elim-alt"
        apply "proof-rule-prop-1"
    $)
    ( imp-is-pattern not-is-pattern bot-is-pattern notation-reflexivity notation-symmetry or-is-pattern notation-transitivity notation-imp not-is-sugar notation-proof imp-transitivity proof-rule-prop-3 proof-rule-mp or-is-sugar not-elim-alt proof-rule-prop-1 rule-or-elim-sugar rule-iff-intro ) ABCADBHABCADDBCCABCADBHCADDACABCADDBCCADDABMAECECACADDACANADDAAECECAADDADECAECECADKAECECADECAECEADEADAECADAECAECAKAECAECAECFGIGEFJGIAFJLOABCADBHABCADDBCABCFADBHADDBCADDBCADBPADDBCADDBCADDBCFGIJLADBABCAECABCCADABCCABQADABCAECABCADAECAECAKAECAECAECFGIABCFJLBARST $.

bot-to-and $p |- ( \iff \bot ( \and ph0 ( \not ph0 ) ) ) $=
    $(
        apply "rule-iff-intro"
        apply "bot-elim"
        desugar "\and"
        desugar "\not"
        apply "proof-rule-mp"
        apply "not-elim"
        desugar-all
        apply "imp-reflexivity"
    $)
    ( bot-is-pattern imp-is-pattern not-is-pattern or-is-pattern notation-symmetry notation-transitivity notation-reflexivity not-is-sugar notation-imp and-is-pattern or-is-sugar notation-proof bot-elim not-elim imp-reflexivity proof-rule-mp and-is-sugar rule-iff-intro ) BAADKAADKNADADDEDBCAADKBCABCABCBCEBCBCADADDEDBCABCABCBCEABCABCBCEBCBCABCABCBCEOABCBCABCBCCABCABCBCEABCBCPABCABCBCEABCDABCBCCABCBCABCBCCABCABCBCLABCBCABCBCCABCDABCBCCABCBCABCBCABCDABCBCABCDABCBCABCDABCBCABCBCABCIABCBCABCBCABCBCHFGFABCBCHJFGMQADADDEDBABCABCBCEBCBADADDEDADADDEBCABCABCBCEBCADADDEIABCABCBCEBCADADDEBCABCABCBCEBADADDEBABCABCBCEABCDABCBCCADADDEABCABCBCLADADDEABCDABCBCCADADDEADDADDCABCDABCBCCADADDLABCDABCBCCADDADDCABCDABCBCADDADDABCDABCBCADDABCIADDABCBCADDADBCABCBCADIABCBCADBCABCBADBADABCADABCABCAIABCABCABCHFGFBHJFGFGADDABCBCADDADBCABCBCADIABCBCADBCABCBADBADABCADABCABCAIABCABCABCHFGFBHJFGFJFGFGBHJFGBHJMAADKBADADDEDBAADKADADDEDADADDEDAADRADADDEDADADDEDADADDEDHFGBHJMS $.

top-to-or $p |- ( \iff \top ( \or ph0 ( \not ph0 ) ) ) $=
    $(
        apply "rule-iff-intro"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        desugar "\or"
        apply "imp-reflexivity"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "top-intro"
    $)
    ( not-is-pattern or-is-pattern imp-is-pattern top-is-pattern proof-rule-prop-1 proof-rule-mp imp-reflexivity or-is-sugar notation-reflexivity notation-symmetry notation-transitivity notation-proof top-intro rule-iff-intro ) EAABCAABCEAABCDAABCEFABABDAABCABHAABCABABDABABDAABIABABDABABDABABDJKLMGEAABCEDEAABCFNGO $.

iff-to-and $p |- ( \iff ( \iff ph0 ph1 ) ( \and ( \or ( \not ph0 ) ph1 ) ( \or ( \not ph1 ) ph0 ) ) ) $=
    $(
        apply "notation-proof"
        let $0 = "( \iff ( \and ( \imp ph0 ph1 ) ( \imp ph1 ph0 ) ) ( \and ( \or ( \not ph0 ) ph1 ) ( \or ( \not ph1 ) ph0 ) ) )"
        meh
        notation
        apply "rule-iff-compat-in-and"
        apply "imp-to-or"
        apply "imp-to-or"
    $)
    ( not-is-pattern imp-is-pattern or-is-pattern and-is-pattern iff-is-pattern bot-is-pattern notation-symmetry notation-transitivity not-is-sugar notation-reflexivity notation-imp iff-is-sugar imp-to-or and-is-sugar or-is-sugar rule-iff-compat-in-and notation-proof ) ABDBADFACBEBCAEFGABGACBEBCAEFGABDACBEBADBCAEABOBAORABGACBEBCAEFGABGACBEBCAEFDACBEBCAEFABGDFABDBADFACBEBCAEFGABGACBEBCAEFNABDBADFACBEBCAEFGABGACBEBCAEFDACBEBCAEFABGDFABDBADFACBEBCAEFGABDBADFACBEBCAEFDACBEBCAEFABDBADFDFABGACBEBCAEFDACBEBCAEFABGDFABDBADFACBEBCAEFNABGACBEBCAEFDACBEBCAEFABGDFABDBADFACBEBCAEFDACBEBCAEFABDBADFDFABGACBEBCAEFDACBEBCAEFABGDFABGACBEBCAEFDCACBEBCAEFABGDCECABDBADFACBEBCAEFDACBEBCAEFABDBADFDFABGACBEBCAEFDACBEBCAEFABGDPABDBADFACBEBCAEFDACBEBCAEFABDBADFDFABGACBEBCAEFDCACBEBCAEFABGDCECABDBADFACBEBCAEFDACBEBCAEFABDBADFDFABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCECABGACBEBCAEFDCACBEBCAEFABGDCECABDBADFACBEBCAEFDACBEBCAEFABDBADFDPABGACBEBCAEFDCACBEBCAEFABGDCECABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCECABGACBEBCAEFDCACBEBCAEFABGDCECABGACBEBCAEFDCACBEBCAEFABGDCEHDABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCECABGACBEBCAEFDCACBEBCAEFABGDCEKABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCECABGACBEBCAEFDCACBEBCAEFABGDCEHDABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCECABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCEHDABGACBEBCAEFDCACBEBCAEFABGDCEHDABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCEKABGACBEBCAEFDCACBEBCAEFABGDCEHDABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCEHDABGACBEBCAEFDCACBEBCAEFABGDCEHABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCEHABGACBEBCAEFDCACBEBCAEFABGDCEABGACBEBCAEFDCCACBEBCAEFABGDCDABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCEABGACBEBCAEFDCACBEBCAEFABGDCQABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCEABGACBEBCAEFDCCACBEBCAEFABGDCDABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCEABDBADFACBEBCAEFDCCACBEBCAEFABDBADFDCDABGACBEBCAEFDCCACBEBCAEFABGDCDABDBADFACBEBCAEFDCACBEBCAEFABDBADFDCQABGACBEBCAEFDCCACBEBCAEFABGDCDABDBADFACBEBCAEFDCCACBEBCAEFABDBADFDCDABGACBEBCAEFDCCACBEBCAEFABGDCABDBADFACBEBCAEFDCCACBEBCAEFABDBADFDCABGACBEBCAEFDCCABGACBEBCAEFDCHDABDBADFACBEBCAEFDCCABGACBEBCAEFDCKABDBADFACBEBCAEFDCCABGACBEBCAEFDCHDABDBADFACBEBCAEFDCCABDBADFACBEBCAEFDCHDABGACBEBCAEFDCHDABDBADFACBEBCAEFDCKABGACBEBCAEFDCHDABDBADFACBEBCAEFDCHDABGACBEBCAEFDCHABDBADFACBEBCAEFDCHABGACBEBCAEFDCABGACBEBCAEFDHDABDBADFACBEBCAEFDCABGACBEBCAEFDKABDBADFACBEBCAEFDCABGACBEBCAEFDHDABDBADFACBEBCAEFDCABDBADFACBEBCAEFDHDABGACBEBCAEFDHDABDBADFACBEBCAEFDKABGACBEBCAEFDHDABDBADFACBEBCAEFDHDABGACBEBCAEFDHABDBADFACBEBCAEFDHABGACBEBCAEFABDBADFACBEBCAEFABGABDBADFABDBADFABNABDBADFABDBADFABDBADFLIJACBEBCAEFLMHLMIJIJHLMIJIJACBEBCAEFABGDCACBEBCAEFABGDHDACBEBCAEFABDBADFDCACBEBCAEFABGDKACBEBCAEFABDBADFDCACBEBCAEFABGDHDACBEBCAEFABDBADFDCACBEBCAEFABDBADFDHDACBEBCAEFABGDHDACBEBCAEFABDBADFDKACBEBCAEFABGDHDACBEBCAEFABDBADFDHDACBEBCAEFABGDHACBEBCAEFABDBADFDHACBEBCAEFABGACBEBCAEFABDBADFACBEBCAEFLABGABDBADFABDBADFABNABDBADFABDBADFABDBADFLIJMHLMIJIJMIJIJHLMIJIJIJIJIJIJS $.

and-associativity $p |- ( \iff ( \and ( \and ph0 ph1 ) ph2 ) ( \and ph0 ( \and ph1 ph2 ) ) ) $=
    $(
        apply "rule-iff-intro"
        apply "rule-and-intro-alt2-sugar"
        apply "rule-imp-transitivity"
        apply "and-elim-left-sugar"
        apply "and-elim-left-sugar"
        apply "rule-and-intro-alt2-sugar"
        apply "rule-imp-transitivity"
        apply "and-elim-left-sugar"
        apply "and-elim-right-sugar"
        apply "rule-imp-transitivity"
        apply "and-elim-right-sugar"
        apply "imp-reflexivity"
        apply "rule-and-intro-alt2-sugar"
        apply "rule-and-intro-alt2-sugar"
        apply "and-elim-left-sugar"
        apply "rule-imp-transitivity"
        apply "and-elim-right-sugar"
        apply "and-elim-left-sugar"
        apply "rule-imp-transitivity"
        apply "and-elim-right-sugar"
        apply "and-elim-right-sugar"
    $)
    ( and-is-pattern and-elim-left-sugar rule-imp-transitivity and-elim-right-sugar rule-and-intro-alt2-sugar imp-reflexivity rule-iff-intro ) ABDCDABCDDABDCDABCDABDCDABDAABDCEABEFABDCDBCABDCDABDBABDCEABGFABDCDCCABDCGCIFHHABCDDABDCABCDDABABCDEABCDDBCDBABCDGBCEFHABCDDBCDCABCDGBCGFHJ $.

and-commutativity $p |- ( \iff ( \and ph0 ph1 ) ( \and ph1 ph0 ) ) $=
    $(
        apply "rule-iff-intro"
        apply "rule-and-intro-alt2-sugar"
        apply "and-elim-right-sugar"
        apply "and-elim-left-sugar"
        apply "rule-and-intro-alt2-sugar"
        apply "and-elim-right-sugar"
        apply "and-elim-left-sugar"
    $)
    ( and-is-pattern and-elim-right-sugar and-elim-left-sugar rule-and-intro-alt2-sugar rule-iff-intro ) ABCBACABCBAABDABEFBACABBADBAEFG $.

or-associativity $p |- ( \iff ( \or ( \or ph0 ph1 ) ph2 ) ( \or ph0 ( \or ph1 ph2 ) ) ) $=
    $(
        apply "rule-iff-intro"
        apply "rule-or-elim-sugar"
        apply "rule-or-elim-sugar"
        apply "or-intro-left-sugar"
        apply "rule-imp-transitivity"
        apply "or-intro-left-sugar"
        apply "or-intro-right-sugar"
        apply "rule-imp-transitivity"
        apply "or-intro-right-sugar"
        apply "or-intro-right-sugar"
        apply "rule-or-elim-sugar"
        apply "rule-imp-transitivity"
        apply "or-intro-left-sugar"
        apply "or-intro-left-sugar"
        apply "rule-or-elim-sugar"
        apply "rule-imp-transitivity"
        apply "or-intro-right-sugar"
        apply "or-intro-left-sugar"
        apply "or-intro-right-sugar"
    $)
    ( or-is-pattern or-intro-left-sugar or-intro-right-sugar rule-imp-transitivity rule-or-elim-sugar rule-iff-intro ) ABDCDABCDDABDCABCDDABABCDDABCDEBBCDABCDDBCEBCDAFGHCBCDABCDDCBFBCDAFGHABCDABDCDAABDABDCDABEABDCEGBCABDCDBABDABDCDBAFABDCEGCABDFHHI $.

or-commutativity $p |- ( \iff ( \or ph0 ph1 ) ( \or ph1 ph0 ) ) $=
    $(
        apply "rule-iff-intro"
        apply "rule-or-elim-sugar"
        apply "or-intro-right-sugar"
        apply "or-intro-left-sugar"
        apply "rule-or-elim-sugar"
        apply "or-intro-right-sugar"
        apply "or-intro-left-sugar"
    $)
    ( or-is-pattern or-intro-right-sugar or-intro-left-sugar rule-or-elim-sugar rule-iff-intro ) ABCBACABBACABDBAEFBAABCBADABEFG $.

de-morgan-and $p |- ( \iff ( \not ( \and ph0 ph1 ) ) ( \or ( \not ph0 ) ( \not ph1 ) ) ) $=
    $(
        apply "rule-iff-intro"
        desugar-all
        apply "proof-rule-prop-3"
        desugar-all
        apply "not-elim"
    $)
    ( imp-is-pattern bot-is-pattern not-is-pattern notation-symmetry or-is-pattern notation-transitivity and-is-pattern not-is-sugar notation-reflexivity notation-imp or-is-sugar and-is-sugar notation-proof proof-rule-prop-3 not-elim rule-iff-intro ) ABIEAEBEGADCDCBDCCDCDCADCDCBDCCCABIEAEBEGCADCDCBDCCPABIEAEBEGADCDCBDCCDCDCADCDCBDCCABIEABIDCADCDCBDCCDCDCABIJADCDCBDCCDCDCABIDCADCDCBDCCDCDABIDABIADCDCBDCCDCABIAEBEGEADCDCBDCCDCABNADCDCBDCCDCAEBEGEAEBEGEADCDCBDCCDCAEBEGEAEBEGDCADCDCBDCCDCAEBEGJADCDCBDCCDCAEBEGDCADCDCBDCCDAEBEGDAEBEGADCDCBDCCAEBEGAEEBECADCDCBDCCAEBEMADCDCBDCCAEEBECADCDCBDCAEEBEAEEADCDCAEEAEDCADCDCAEJADCDCAEDCADCDAEDAEADCAEADCADCAJADCADCADCKFHFDKLFHFBEBDCBEBDCBDCBJBDCBDCBDCKFHFLFHFDKLFHFFHFDKLFHAEBEGAEEBECADCDCBDCCAEBEMADCDCBDCCAEEBECADCDCBDCAEEBEAEEADCDCAEEAEDCADCDCAEJADCDCAEDCADCDAEDAEADCAEADCADCAJADCADCADCKFHFDKLFHFBEBDCBEBDCBDCBJBDCBDCBDCKFHFLFHLOADCDCBDCCADCDCBDCCDCDCCAEBEGABIECADCDCBDCCQAEBEGABIEADCDCBDCCADCDCBDCCDCDCAEBEGAEEBECADCDCBDCCAEBEMADCDCBDCCAEEBECADCDCBDCAEEBEAEEADCDCAEEAEDCADCDCAEJADCDCAEDCADCDAEDAEADCAEADCADCAJADCADCADCKFHFDKLFHFBEBDCBEBDCBDCBJBDCBDCBDCKFHFLFHABIEABIDCADCDCBDCCDCDCABIJADCDCBDCCDCDCABIDCADCDCBDCCDCDABIDABIADCDCBDCCDCABIAEBEGEADCDCBDCCDCABNADCDCBDCCDCAEBEGEAEBEGEADCDCBDCCDCAEBEGEAEBEGDCADCDCBDCCDCAEBEGJADCDCBDCCDCAEBEGDCADCDCBDCCDAEBEGDAEBEGADCDCBDCCAEBEGAEEBECADCDCBDCCAEBEMADCDCBDCCAEEBECADCDCBDCAEEBEAEEADCDCAEEAEDCADCDCAEJADCDCAEDCADCDAEDAEADCAEADCADCAJADCADCADCKFHFDKLFHFBEBDCBEBDCBDCBJBDCBDCBDCKFHFLFHFDKLFHFFHFDKLFHLOR $.

de-morgan-or $p |- ( \iff ( \not ( \or ph0 ph1 ) ) ( \and ( \not ph0 ) ( \not ph1 ) ) ) $=
    $(
        desugar "\and"
        apply "rule-iff-compat-in-not"
        apply "rule-iff-compat-in-or"
        apply "rule-iff-symmetry"
        apply "double-negation"
        apply "rule-iff-symmetry"
        apply "double-negation"
    $)
    ( not-is-pattern or-is-pattern imp-is-pattern and-is-pattern bot-is-pattern notation-symmetry notation-transitivity not-is-sugar notation-reflexivity notation-imp iff-is-pattern and-is-sugar double-negation rule-iff-symmetry iff-is-sugar or-is-sugar rule-iff-compat-in-or rule-iff-compat-in-not notation-proof ) ABDCACCBCCDCMABDCACBCFMABDACCBCCDAACCBBCCACCAAOPBCCBBOPSTABDCACBCFMABDCACBCFEACBCFABDCEFABDCACCBCCDCMABDCACBCFQABDCACCBCCDCMABDCACBCFEACBCFABDCEFABDCACCBCCDCMABDCACCBCCDCEACCBCCDCABDCEFABDCACBCFEACBCFABDCEFABDCACCBCCDCQABDCACBCFEACBCFABDCEFABDCACCBCCDCEACCBCCDCABDCEFABDCACBCFEACBCFABDCEFABDCACBCFECACBCFABDCECDCABDCACCBCCDCEACCBCCDCABDCEFABDCACBCFEACBCFABDCENABDCACCBCCDCEACCBCCDCABDCEFABDCACBCFECACBCFABDCECDCABDCACCBCCDCEACCBCCDCABDCEFABDCACCBCCDCECACCBCCDCABDCECDCABDCACBCFECACBCFABDCECDCABDCACCBCCDCEACCBCCDCABDCENABDCACBCFECACBCFABDCECDCABDCACCBCCDCECACCBCCDCABDCECDCABDCACBCFECACBCFABDCECDCABDCACBCFECACBCFABDCECDGEABDCACCBCCDCECACCBCCDCABDCECDCABDCACBCFECACBCFABDCECDJABDCACCBCCDCECACCBCCDCABDCECDCABDCACBCFECACBCFABDCECDGEABDCACCBCCDCECACCBCCDCABDCECDCABDCACCBCCDCECACCBCCDCABDCECDGEABDCACBCFECACBCFABDCECDGEABDCACCBCCDCECACCBCCDCABDCECDJABDCACBCFECACBCFABDCECDGEABDCACCBCCDCECACCBCCDCABDCECDGEABDCACBCFECACBCFABDCECDGABDCACCBCCDCECACCBCCDCABDCECDGABDCACBCFECACBCFABDCECDABDCACBCFECCACBCFABDCECEABDCACCBCCDCECACCBCCDCABDCECDABDCACBCFECACBCFABDCECRABDCACCBCCDCECACCBCCDCABDCECDABDCACBCFECCACBCFABDCECEABDCACCBCCDCECACCBCCDCABDCECDABDCACCBCCDCECCACCBCCDCABDCECEABDCACBCFECCACBCFABDCECEABDCACCBCCDCECACCBCCDCABDCECRABDCACBCFECCACBCFABDCECEABDCACCBCCDCECCACCBCCDCABDCECEABDCACBCFECCACBCFABDCECABDCACCBCCDCECCACCBCCDCABDCECABDCACBCFECCABDCACBCFECGEABDCACCBCCDCECCABDCACBCFECJABDCACCBCCDCECCABDCACBCFECGEABDCACCBCCDCECCABDCACCBCCDCECGEABDCACBCFECGEABDCACCBCCDCECJABDCACBCFECGEABDCACCBCCDCECGEABDCACBCFECGABDCACCBCCDCECGABDCACBCFECABDCACBCFEGEABDCACCBCCDCECABDCACBCFEJABDCACCBCCDCECABDCACBCFEGEABDCACCBCCDCECABDCACCBCCDCEGEABDCACBCFEGEABDCACCBCCDCEJABDCACBCFEGEABDCACCBCCDCEGEABDCACBCFEGABDCACCBCCDCEGABDCACBCFABDCACCBCCDCABDCKACBCFACCBCCDCACCBCCDCACBCNACCBCCDCACCBCCDCACCBCCDCKHILGKLHIHIGKLHIHIACBCFABDCECACBCFABDCEGEACCBCCDCABDCECACBCFABDCEJACCBCCDCABDCECACBCFABDCEGEACCBCCDCABDCECACCBCCDCABDCEGEACBCFABDCEGEACCBCCDCABDCEJACBCFABDCEGEACCBCCDCABDCEGEACBCFABDCEGACCBCCDCABDCEGACBCFABDCACCBCCDCABDCACBCFACCBCCDCACCBCCDCACBCNACCBCCDCACCBCCDCACCBCCDCKHIABDCKLGKLHIHILHIHIGKLHIHIHIHIHIHIUA $.

or-idempotency $p |- ( \iff ( \or ph0 ph0 ) ph0 ) $=
    $(
        apply "rule-iff-intro"
        apply "rule-or-elim-sugar"
        apply "imp-reflexivity"
        apply "imp-reflexivity"
        apply "or-intro-left-sugar"
    $)
    ( imp-reflexivity or-is-pattern rule-or-elim-sugar or-intro-left-sugar rule-iff-intro ) AACAAAAABABDAAEF $.

and-idempotency $p |- ( \iff ( \and ph0 ph0 ) ph0 ) $=
    $(
        apply "rule-iff-intro"
        apply "and-elim-left-sugar"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "and-intro-sugar"
        apply "imp-reflexivity"
    $)
    ( imp-is-pattern and-is-pattern proof-rule-mp and-elim-left-sugar proof-rule-prop-2 and-intro-sugar imp-reflexivity rule-iff-intro ) AACAAAEAABAAACBAAAACBBAABAAACBBAAAACFAAGDAHDI $.

or-complement $p |- ( \iff ( \or ( \not ph0 ) ph0 ) \top ) $=
    $(
        apply "rule-iff-intro"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "top-intro"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        desugar-all
        apply "proof-rule-prop-3"
    $)
    ( imp-is-pattern bot-is-pattern not-is-pattern or-is-pattern top-is-pattern notation-symmetry notation-reflexivity notation-transitivity proof-rule-prop-1 proof-rule-mp not-is-sugar notation-imp top-intro proof-rule-prop-3 or-is-sugar notation-proof rule-iff-intro ) ADAEFFADAEFBFADAEJNKADAEFADAEBADAEFJACBCBABADAEAOADAEADDABACBCBABADAPACBCBABADDABACBCBAADDAADDACBCBADDADCBACBCBADLACBCBADCBACBCADCADACBADACBACBALACBACBACBHGIGCHMGIGAHMGIQKR $.

and-top $p |- ( \iff ( \and \top ph0 ) ph0 ) $=
    $(
        apply "rule-iff-intro"
        apply "and-elim-right-sugar"
        apply "proof-rule-mp"
        apply "and-intro-sugar"
        apply "top-intro"
    $)
    ( top-is-pattern and-is-pattern and-elim-right-sugar imp-is-pattern and-intro-sugar top-intro proof-rule-mp rule-iff-intro ) BACABADBABACEBAFGHI $.

or-top $p |- ( \iff ( \or \top ph0 ) \top ) $=
    $(
        apply "rule-iff-intro"
        apply "rule-or-elim-sugar"
        apply "imp-reflexivity"
        apply "proof-rule-mp"
        apply "proof-rule-prop-1"
        apply "top-intro"
        apply "or-intro-left-sugar"
    $)
    ( top-is-pattern or-is-pattern imp-reflexivity imp-is-pattern proof-rule-prop-1 top-intro proof-rule-mp rule-or-elim-sugar or-intro-left-sugar rule-iff-intro ) BACBBABBDBABEBAFGHIBAJK $.

and-bot $p |- ( \imp ( \and \bot ph0 ) \bot ) $=
    $(
        desugar-all
        apply "and-elim-left"
    $)
    ( bot-is-pattern imp-is-pattern not-is-pattern notation-symmetry or-is-pattern notation-transitivity notation-reflexivity not-is-sugar notation-imp and-is-pattern and-elim-left and-is-sugar or-is-sugar notation-proof ) BBCBCABCCBCBCBAKBCBALBAKBBBCBCABCCBCBBAKBDADFDBBCBCABCCBCBAMBBCBCABCCBCBDADFDBDADFDBBCBCABCCBCBDADFDBDADFBCBBCBCABCCBCBDADFIBBCBCABCCBCBDADFBCBBCBCABCCBBDADFBBDADFBBCBCABCCBDADFBDDADCBBCBCABCCBDADNBBCBCABCCBDDADCBBCBCABCBDDADBDDBBCBCBDDBDBCBBCBCBDIBBCBCBDBCBBCBBDBBDBBCBDBBCBBCBIBBCBBCBBCHEGEBHJEGEADABCADABCABCAIABCABCABCHEGEJEGEBHJEGEEGBHJO $.

or-commutativity-alt $p |- ( \imp ( \imp ( \not ph0 ) ph1 ) ( \imp ( \not ph1 ) ph0 ) ) $=
    $(
        apply "notation-proof"
        let $0 = "( \imp ( \or ph0 ph1 ) ( \or ph1 ph0 ) )"
        apply "rule-iff-elim-left"
        apply "or-commutativity"
        notation
    $)
    ( imp-is-pattern not-is-pattern or-is-pattern notation-symmetry or-is-sugar notation-reflexivity notation-transitivity or-commutativity rule-iff-elim-left notation-imp notation-proof ) ABEBAECADBCBDACCABEBAEABJKADBCBDACABEBAEABEADBCABEADBCADBCABGADBCADBCADBCHFIFBAEBDACBAEBDACBDACBAGBDACBDACBDACHFIFLM $.

or-to-imp-alt $p |- ( \imp ( \or ph0 ph1 ) ( \imp ( \not ph0 ) ph1 ) ) $=
    $(
        apply "notation-proof"
        let $0 = "( \imp ( \imp ( \not ph0 ) ph1 ) ( \imp ( \not ph0 ) ph1 ) )"
        apply "imp-reflexivity"
        notation
    $)
    ( imp-is-pattern not-is-pattern or-is-pattern notation-reflexivity imp-reflexivity or-is-sugar notation-symmetry notation-transitivity notation-imp notation-proof ) ADBCADBCCABEADBCCADBCGABEADBCADBCADBCABEADBCADBCABHADBCADBCADBCFIJADBCFKL $.

${
    rule-or-left-distributivity-right.0 $e |- ( \and ( \or ph0 ph2 ) ( \or ph1 ph2 ) ) $.
    rule-or-left-distributivity-right $p |- ( \or ( \and ph0 ph1 ) ph2 ) $=
        $(
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "case"
            apply "or-intro-right-sugar"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "imp-transitivity"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-mp"
            apply "proof-rule-prop-2"
            apply "proof-rule-mp"
            apply "proof-rule-prop-1"
            apply "and-intro-sugar"
            apply "proof-rule-mp"
            apply "or-commutativity-alt"
            apply "proof-rule-mp"
            apply "or-to-imp-alt"
            apply "proof-rule-mp"
            apply "and-elim-left-sugar"
            apply "rule-or-left-distributivity-right.0"
            apply "proof-rule-mp"
            apply "or-commutativity-alt"
            apply "proof-rule-mp"
            apply "or-to-imp-alt"
            apply "proof-rule-mp"
            apply "and-elim-right-sugar"
            apply "rule-or-left-distributivity-right.0"
            apply "or-intro-left-sugar"
        $)
        ( imp-is-pattern and-is-pattern not-is-pattern or-is-pattern proof-rule-mp proof-rule-prop-2 or-commutativity-alt or-to-imp-alt case or-intro-right-sugar imp-transitivity proof-rule-prop-1 and-intro-sugar and-elim-left-sugar and-elim-right-sugar or-intro-left-sugar ) CGABFCHEABFCHCABFCHECGABFCHEABFCHECABFCHMCABFNIABFABFCHECGABFCHECGABFEABFABFCHECGABFCHEECGABFABFCHOCGBECGABFECGBABFEECGBECGABFEECGBABFJCGAECGBABFEECGABABFEEECGAECGBABFEEECGABABFEJABABFEECGABABFEEEABABFEECGPABQIIAGCECGAEACKACHAGCEACLACHBCHFACHACHBCHRDIIIIIBGCECGBEBCKBCHBGCEBCLACHBCHFBCHACHBCHSDIIIIIABFCTII $.
$}

or-left-distributivity-right $p |- ( \imp ( \and ( \or ph0 ph2 ) ( \or ph1 ph2 ) ) ( \or ( \and ph0 ph1 ) ph2 ) ) $=
    $( proof script omitted. apply deduction theorem to rule-or-left-distributivity-right $)
    ( imp-is-pattern or-is-pattern and-is-pattern not-is-pattern proof-rule-mp proof-rule-prop-2 proof-rule-prop-1 or-commutativity-alt or-to-imp-alt imp-reflexivity case or-intro-right-sugar imp-transitivity and-intro-sugar and-elim-left-sugar and-elim-right-sugar or-intro-left-sugar ) ACEBCEFCGABFCEDDACEBCEFABFCEDACEBCEFCGABFCEDABFCEDDACEBCEFCGABFCEDDACEBCEFABFCEDDACEBCEFCGABFCEDABFCEIACEBCEFCABFCEDDACEBCEFCGABFCEDABFCEDDACEBCEFCABFCEDCGABFCEDABFCEDDDACEBCEFCABFCEDDACEBCEFCGABFCEDABFCEDDDACEBCEFCABFCEDCGABFCEDABFCEDICABFCEDCGABFCEDABFCEDDACEBCEFCABFCEDCGABFCEDABFCEDDDCABFCEDCGABFCEDABFCEDDACEBCEFJCABFCENHHCABFCEDACEBCEFCABFCEDDCABFCEDACEBCEFJCABFOHHHACEBCEFABFABFCEDDACEBCEFCGABFCEDDACEBCEFABFABFCEDCGABFCEDDDACEBCEFABFABFCEDDACEBCEFCGABFCEDDDACEBCEFABFABFCEDCGABFCEDIACEBCEFCGABFDDACEBCEFABFABFCEDCGABFCEDDDACEBCEFCGABFDABFABFCEDCGABFCEDDDDACEBCEFCGABFDDACEBCEFABFABFCEDCGABFCEDDDDACEBCEFCGABFDABFABFCEDCGABFCEDDICGABFDABFABFCEDCGABFCEDDDACEBCEFCGABFDABFABFCEDCGABFCEDDDDCGABFDABFABFCEDCGABFCEDDDACEBCEFJCGABFABFCEPHHACEBCEFCGBDDACEBCEFCGABFDDACEBCEFCGBDCGABFDDDACEBCEFCGBDDACEBCEFCGABFDDDACEBCEFCGBDCGABFDIACEBCEFCGBABFDDDACEBCEFCGBDCGABFDDDACEBCEFCGBABFDDCGBDCGABFDDDDACEBCEFCGBABFDDDACEBCEFCGBDCGABFDDDDACEBCEFCGBABFDDCGBDCGABFDDICGBABFDDCGBDCGABFDDDACEBCEFCGBABFDDCGBDCGABFDDDDCGBABFDDCGBDCGABFDDDACEBCEFJCGBABFIHHACEBCEFCGADDACEBCEFCGBABFDDDACEBCEFCGADCGBABFDDDDACEBCEFCGADDACEBCEFCGBABFDDDDACEBCEFCGADCGBABFDDIACEBCEFCGABABFDDDDACEBCEFCGADCGBABFDDDDACEBCEFCGABABFDDDCGADCGBABFDDDDDACEBCEFCGABABFDDDDACEBCEFCGADCGBABFDDDDDACEBCEFCGABABFDDDCGADCGBABFDDDICGABABFDDDCGADCGBABFDDDDACEBCEFCGABABFDDDCGADCGBABFDDDDDCGABABFDDDCGADCGBABFDDDDACEBCEFJCGABABFDIHHACEBCEFABABFDDDACEBCEFCGABABFDDDDACEBCEFABABFDDCGABABFDDDDDACEBCEFABABFDDDACEBCEFCGABABFDDDDDACEBCEFABABFDDCGABABFDDDIABABFDDCGABABFDDDDACEBCEFABABFDDCGABABFDDDDDABABFDDCGABABFDDDDACEBCEFJABABFDDCGJHHABABFDDACEBCEFABABFDDDABABFDDACEBCEFJABQHHHHACEBCEFAGCDDACEBCEFCGADDACEBCEFAGCDCGADDDACEBCEFAGCDDACEBCEFCGADDDACEBCEFAGCDCGADIAGCDCGADDACEBCEFAGCDCGADDDAGCDCGADDACEBCEFJACKHHACEBCEFACEDACEBCEFAGCDDACEBCEFACEAGCDDDACEBCEFACEDACEBCEFAGCDDDACEBCEFACEAGCDIACEAGCDDACEBCEFACEAGCDDDACEAGCDDACEBCEFJACLHHACEBCEFACEBCEFDACEBCEFACEDACEBCEFACEBCEFACEDDACEBCEFACEBCEFDACEBCEFACEDDACEBCEFACEBCEFACEIACEBCEFACEDACEBCEFACEBCEFACEDDACEBCEFACEDACEBCEFJACEBCERHHACEBCEFMHHHHHHACEBCEFBGCDDACEBCEFCGBDDACEBCEFBGCDCGBDDDACEBCEFBGCDDACEBCEFCGBDDDACEBCEFBGCDCGBDIBGCDCGBDDACEBCEFBGCDCGBDDDBGCDCGBDDACEBCEFJBCKHHACEBCEFBCEDACEBCEFBGCDDACEBCEFBCEBGCDDDACEBCEFBCEDACEBCEFBGCDDDACEBCEFBCEBGCDIBCEBGCDDACEBCEFBCEBGCDDDBCEBGCDDACEBCEFJBCLHHACEBCEFACEBCEFDACEBCEFBCEDACEBCEFACEBCEFBCEDDACEBCEFACEBCEFDACEBCEFBCEDDACEBCEFACEBCEFBCEIACEBCEFBCEDACEBCEFACEBCEFBCEDDACEBCEFBCEDACEBCEFJACEBCESHHACEBCEFMHHHHHHABFABFCEDACEBCEFABFABFCEDDABFABFCEDACEBCEFJABFCTHHH $.

or-left-distributivity $p |- ( \iff ( \or ( \and ph0 ph1 ) ph2 ) ( \and ( \or ph0 ph2 ) ( \or ph1 ph2 ) ) ) $=
    $(
        apply "rule-iff-intro"
        apply "rule-or-elim-sugar"
        apply "rule-and-intro-alt2-sugar"
        apply "rule-imp-transitivity"
        apply "and-elim-left-sugar"
        apply "or-intro-left-sugar"
        apply "rule-imp-transitivity"
        apply "and-elim-right-sugar"
        apply "or-intro-left-sugar"
        apply "rule-and-intro-alt2-sugar"
        apply "or-intro-right-sugar"
        apply "or-intro-right-sugar"
        apply "or-left-distributivity-right"
    $)
    ( or-is-pattern and-is-pattern or-intro-left-sugar rule-imp-transitivity rule-and-intro-alt2-sugar or-intro-right-sugar and-elim-left-sugar and-elim-right-sugar rule-or-elim-sugar or-left-distributivity-right rule-iff-intro ) ABECDACDBCDEABECACDBCDEABEACDBCDABEAACDABJACFGABEBBCDABKBCFGHCACDBCDCAICBIHLABCMN $.

or-right-distributivity $p |- ( \iff ( \or ph0 ( \and ph1 ph2 ) ) ( \and ( \or ph0 ph1 ) ( \or ph0 ph2 ) ) ) $=
    $(
        apply "rule-iff-intro"
        apply "rule-imp-transitivity"
        apply "rule-iff-elim-left"
        apply "or-commutativity"
        apply "rule-imp-transitivity"
        apply "rule-iff-elim-left"
        apply "or-left-distributivity"
        apply "rule-imp-compat-in-and"
        apply "rule-iff-elim-left"
        apply "or-commutativity"
        apply "rule-iff-elim-left"
        apply "or-commutativity"
        apply "rule-imp-transitivity"
        apply "rule-imp-transitivity"
        apply "rule-imp-compat-in-and"
        apply "rule-iff-elim-left"
        apply "or-commutativity"
        apply "rule-iff-elim-left"
        apply "or-commutativity"
        apply "rule-iff-elim-right"
        apply "or-left-distributivity"
        apply "rule-iff-elim-left"
        apply "or-commutativity"
    $)
    ( or-is-pattern and-is-pattern rule-iff-elim-left or-commutativity rule-imp-transitivity or-left-distributivity rule-imp-compat-in-and rule-iff-elim-right rule-iff-intro ) ABCEDABDACDEABCEDBCEADABDACDEABCEDBCEADABCEGFBCEADBADCADEABDACDEBCEADBADCADEBCAIFBADABDCADACDBADABDBAGFCADACDCAGFJHHABDACDEBCEADABCEDABDACDEBADCADEBCEADABDBADACDCADABDBADABGFACDCADACGFJBCEADBADCADEBCAIKHBCEADABCEDBCEAGFHL $.

and-left-distributivity $p |- ( \iff ( \and ( \or ph0 ph1 ) ph2 ) ( \or ( \and ph0 ph2 ) ( \and ph1 ph2 ) ) ) $=
    $(
        apply "rule-iff-intro"
        apply "rule-contrapositive-alt-sugar"
        apply "rule-imp-transitivity"
        apply "rule-imp-transitivity"
        apply "rule-iff-elim-left"
        apply "de-morgan-or"
        apply "rule-imp-compat-in-and"
        apply "rule-iff-elim-left"
        apply "de-morgan-and"
        apply "rule-iff-elim-left"
        apply "de-morgan-and"
        apply "rule-imp-transitivity"
        apply "rule-iff-elim-right"
        apply "or-left-distributivity"
        apply "rule-imp-transitivity"
        apply "rule-imp-compat-in-or"
        apply "rule-iff-elim-right"
        apply "de-morgan-or"
        apply "imp-reflexivity"
        apply "rule-iff-elim-right"
        apply "de-morgan-and"
        apply "rule-contrapositive-alt-sugar"
        apply "rule-imp-transitivity"
        apply "rule-imp-transitivity"
        apply "rule-iff-elim-left"
        apply "de-morgan-and"
        apply "rule-imp-compat-in-or"
        apply "rule-iff-elim-left"
        apply "de-morgan-or"
        apply "imp-reflexivity"
        apply "rule-imp-transitivity"
        let $72 = "( \and ( \not ( \and ph0 ph2 ) ) ( \not ( \and ph1 ph2 ) ) )"
        apply "rule-imp-transitivity"
        let $75 = "( \and ( \or ( \not ph0 ) ( \not ph2 ) ) ( \or ( \not ph1 ) ( \not ph2 ) ) )"
        apply "rule-iff-elim-left"
        apply "or-left-distributivity"
        apply "rule-imp-compat-in-and"
        apply "rule-iff-elim-right"
        apply "de-morgan-and"
        apply "rule-iff-elim-right"
        apply "de-morgan-and"
        apply "rule-iff-elim-right"
        apply "de-morgan-or"
    $)
    ( not-is-pattern and-is-pattern or-is-pattern rule-imp-transitivity rule-iff-elim-left de-morgan-and rule-iff-elim-right de-morgan-or rule-imp-compat-in-and or-left-distributivity imp-reflexivity rule-imp-compat-in-or rule-contrapositive-alt-sugar rule-iff-intro ) ABFCEACEBCEFACEBCEFABFCEACEBCEFDADCDFBDCDFEABFCEDACEBCEFDACEDBCEDEADCDFBDCDFEACEBCEFDACEDBCEDEACEBCEKHACEDADCDFBCEDBDCDFACEDADCDFACIHBCEDBDCDFBCIHLGADCDFBDCDFEADBDECDFABFCEDADBDECDFADCDFBDCDFEADBDCDMJADBDECDFABFDCDFABFCEDADBDEABFDCDCDABFDADBDEABKJCDNOABFCEDABFDCDFABFCIJGGGPABFCEACEBCEFABFCEDADBDECDFACEBCEFDABFCEDABFDCDFADBDECDFABFCEDABFDCDFABFCIHABFDADBDECDCDABFDADBDEABKHCDNOGADBDECDFACEDBCEDEACEBCEFDADBDECDFADCDFBDCDFEACEDBCEDEADBDECDFADCDFBDCDFEADBDCDMHADCDFACEDBDCDFBCEDACEDADCDFACIJBCEDBDCDFBCIJLGACEBCEFDACEDBCEDEACEBCEKJGGPQ $.

$( four versions of resolution $)
resolution-1 $p |- ( \imp ( \and ( \not ph0 ) ph0 ) \bot ) $=
    $(
        apply "rule-imp-transitivity"
        apply "rule-iff-elim-left"
        apply "and-commutativity"
        apply "rule-iff-elim-right"
        apply "bot-to-and"
    $)
    ( not-is-pattern and-is-pattern bot-is-pattern and-commutativity rule-iff-elim-left bot-to-and rule-iff-elim-right rule-imp-transitivity ) ABACAABCDABACAABCABAEFDAABCAGHI $.

resolution-2 $p |- ( \imp ( \and ( \or ( \not ph0 ) ph1 ) ph0 ) ph1 ) $=
    $(
        desugar "\or"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "rule-imp-transitivity"
        apply "and-elim-left-sugar"
        apply "proof-rule-mp"
        apply "imp-transitivity"
        let $14 = "ph0"
        desugar "\not"
        apply "not-elim"
        apply "and-elim-right-sugar"
    $)
    ( not-is-pattern imp-is-pattern or-is-pattern bot-is-pattern and-is-pattern notation-symmetry notation-transitivity notation-reflexivity not-is-sugar notation-imp proof-rule-mp or-is-sugar notation-proof and-is-sugar proof-rule-prop-2 and-elim-left-sugar imp-transitivity not-elim rule-imp-transitivity and-elim-right-sugar ) ACCBDAGBDACBEAGBDACCBDAGADACCBDAGBDACCBDAGABDDACCBDAGADACCBDAGBDDACCBDAGABQACCBDAGACCBDABDACCBDARAACCDACCBDABDDAACCBSAAFDFDDAACCDATAACCAAFDFDAJACCACFDAFDFDACKAFDFDACFDAFDFACFACAFDACAFDAFDAKAFDAFDAFDJHIHFJLHILOMUAMACCBDAUBMACBEAGBACCBDAGBACBEAGACBECACECACCBDAGACBEAPACCBDAGACBECACECACCBDAGACCBDCACECACBECACECACCBDAPACBECACECACCBDCACECACBECACECACBECACEFDACCBDCACECACBECACEKACCBDCACECACBECACEFDACCBDCACECACCBDCACEFDACBECACEFDACCBDCACEKACBECACEFDACCBDCACEFDACBECACEFACCBDCACEFACBECACEACBECCACDACCBDCACEACBECACNACCBDCACEACBECCACDACCBDCACEACCBDCCACDACBECCACDACCBDCACNACBECCACDACCBDCCACDACBECCACACCBDCCACACBECCACBECFDACCBDCCACBECKACCBDCCACBECFDACCBDCCACCBDCFDACBECFDACCBDCKACBECFDACCBDCFDACBECFACCBDCFACBECACBEFDACCBDCACBEKACCBDCACBEFDACCBDCACCBDFDACBEFDACCBDKACBEFDACCBDFDACBEFACCBDFACBEACCBDACCBDACBNACCBDACCBDACCBDJHIFJLHIHIFJLHIHIACJLHIHIFJLHIHIHIHIBJLO $.

resolution-3 $p |- ( \imp ( \and ( \not ph0 ) ( \or ph0 ph1 ) ) ph1 ) $=
    $(
        desugar "\or"
        apply "proof-rule-mp"
        apply "proof-rule-mp"
        apply "proof-rule-prop-2"
        apply "and-elim-right-sugar"
        apply "and-elim-left-sugar"
    $)
    ( not-is-pattern imp-is-pattern or-is-pattern bot-is-pattern and-is-pattern notation-symmetry notation-transitivity notation-reflexivity not-is-sugar notation-imp or-is-sugar proof-rule-mp and-is-sugar proof-rule-prop-2 and-elim-right-sugar and-elim-left-sugar notation-proof ) ACACBDGBDACABEGBDACACBDGACDACACBDGBDACACBDGACBDDACACBDGACDACACBDGBDDACACBDGACBPACACBDQNACACBDRNACABEGBACACBDGBACABEGACCABECECACACBDGACABEOACACBDGACCABECECACACBDGACCACBDCECACCABECECACACBDOACCABECECACCACBDCECACCABECECACCABECEFDACCACBDCECACCABECEKACCACBDCECACCABECEFDACCACBDCECACCACBDCEFDACCABECEFDACCACBDCEKACCABECEFDACCACBDCEFDACCABECEFACCACBDCEFACCABECEACCCABECDACCACBDCEACCABECMACCACBDCEACCCABECDACCACBDCEACCCACBDCDACCCABECDACCACBDCMACCCABECDACCCACBDCDACCCABECACCCACBDCACCCJABECABEFDACBDCABEKACBDCABEFDACBDCACBDFDABEFDACBDKABEFDACBDFDABEFACBDFABEACBDACBDABMACBDACBDACBDJHIFJLHIHILHIHIFJLHIHIHIHIBJLS $.

resolution-4 $p |- ( \imp ( \and ( \or ( \not ph0 ) ph1 ) ( \or ph0 ph2 ) ) ( \or ph1 ph2 ) ) $=
    $(
        apply "rule-imp-transitivity"
        apply "rule-iff-elim-left"
        apply "and-left-distributivity"
        apply "rule-or-elim-sugar"
        apply "rule-imp-transitivity"
        meh
        apply "or-intro-right-sugar"
        apply "rule-imp-transitivity"
        apply "and-elim-left-sugar"
        apply "or-intro-left-sugar"
        apply resolution-3
    $)
    ( or-is-pattern and-is-pattern not-is-pattern rule-imp-transitivity and-left-distributivity rule-iff-elim-left resolution-3 or-intro-right-sugar and-elim-left-sugar or-intro-left-sugar rule-or-elim-sugar ) AFBDACDEAFACDEBACDEDBCDAFBDACDEAFACDEBACDEDAFBACDHIAFACDEBACDEBCDAFACDECBCDACJCBKGBACDEBBCDBACDLBCMGNG $.

${
    premises-switch.0 $e |- ( \imp ph0 ( \imp ph1 ph2 ) ) $.
    premises-switch   $p |- ( \imp ph1 ( \imp ph0 ph2 ) ) $=
        $(
            apply "proof-rule-mp"
            let $0 = "( \imp ph0 ( \imp ph1 ph2 ) )"
            tautology
            apply "premises-switch.0"
        $)
        ( not-is-pattern and-is-pattern or-is-pattern iff-reflexivity rule-iff-transitivity imp-is-pattern rule-iff-compat-in-and and-associativity rule-iff-symmetry rule-iff-compat-in-not rule-iff-compat-in-or and-commutativity rule-imp-transitivity rule-iff-elim-left bot-is-pattern imp-to-or de-morgan-or double-negation and-idempotency and-elim-left-sugar rule-imp-compat-in-and resolution-2 proof-rule-mp contradiction resolution-1 and-bot ) ABCJJBACJJABCJJBACJJJESJABCJJBACJJJABCJJBACJJJUHABCJJBACJJJECEABAEBECGGFFFSABCJJBACJJJECEABAEBECGGFFFABCJJBACJJJEAEBECGGBACEFFFCEABAEBECGGFFFABCJJBACJJJEAEBECGGEBEAECGGGEAEBECGGBACEFFFABCJJBACJJJAEBECGGEBEAECGGGABCJJBACJJJABCJJEBACJJGAEBECGGEBEAECGGGABCJJBACJJTABCJJEAEBECGGEBACJJBEAECGGABCJJAEBECGGABCJJAEBCJGAEBECGGABCJTAEAEBCJBECGAAAHNBCJBECGBECGBCTBEBECCBBBHNCHOIOINBACJJBEACJGBEAECGGBACJTBEBEACJAECGBBBHNACJAECGAECGACTAEAECCAAAHNCHOIOIOINAEBECGGEBEAECGGGEAEBECGGEEBEAECGGEFAEBECGGBACEFFFAEBECGGEBEAECGGUAAEBECGGEEBEAECGGEFAEBECGGBACEFFFAEBECGGBACEFFFAEBECGGEEAEBECGGBEAECGGEBACEFFAEBECGGEEAEBECGGAEBECGGAEBECGGUBAEBECGGAEBECGGAEBECGGAEAEBECGBECGAAAHNBEBECCBBBHNCHOOAEAEBECGBECGAAAHNBEBECCBBBHNCHOOIIBEAECGGEBEEAECGEFBACEFFBEAECGUABEEAECGEFBACEFFBACEFFBEEBAECGEACEFBEEBBBUBBHIAECGEAEECEFACEFAECUAAEECEFACEFACEFAEEACECEAEEAAAUBAHICEHKACEFHIIKBACEFFHIIKAEBECGGBACEFFFHIIIAEBECGGBACEFFFAEBECGGBACEFFFCEABAEBECGGFFFAEBECGGBACEFFFHAEBECGGBACEFFFBAEBECGGACEFFFCEABAEBECGGFFFAEBECGGBACEFFFBAEBECGGACEFFFBAEBECGGACEFFFAEBECGGBACEFFFBAEBECGGFACEFFBAEBECGGACEFFFAEBECGGBACEFFFAEBECGGBFACEFFBAEBECGGFACEFFAEBECGGBACEFFFAEBECGGBACEFFFAEBECGGBFACEFFAEBECGGBACEFFFHAEBECGGBFACEFFAEBECGGBACEFFFAEBECGGBACEFLMIAEBECGGBFBAEBECGGFACEFACEFAEBECGGBPACEFHKIBAEBECGGACEFLIBBAEBECGGACEFFAEBECGGACEFFBHAEBECGGACEFFHKIBAEBECGGACEFFFABAEBECGGCEFFFCEABAEBECGGFFFBAEBECGGACEFFFABAEBECGGCEFFFABAEBECGGCEFFFBAEBECGGACEFFFABFAEBECGGCEFFABAEBECGGCEFFFBAEBECGGACEFFFBAFAEBECGGCEFFABFAEBECGGCEFFBAEBECGGACEFFFBAAEBECGGCEFFFBAFAEBECGGCEFFBBAEBECGGACEFFAAEBECGGCEFFBHAEBECGGACEFFAAEBECGGFCEFAAEBECGGCEFFAEBECGGACEFFAEBECGGAFCEFAAEBECGGFCEFAEBECGGACEFFAEBECGGACEFFAEBECGGAFCEFAEBECGGACEFFHAEBECGGAFCEFAEBECGGACEFFAEBECGGACELMIAEBECGGAFAAEBECGGFCECEAEBECGGAPCEHKIAAEBECGGCELIKBAFAEBECGGCEFFBAAEBECGGCEFFFBAAEBECGGCEFLMIBAFABFAEBECGGCEFAEBECGGCEFBAPAEBECGGCEFHKIABAEBECGGCEFLIAABAEBECGGCEFFBAEBECGGCEFFAHBAEBECGGCEFFHKIABAEBECGGCEFFFCEABAEBECGGFFFCEABAEBECGGFFFABAEBECGGCEFFFCEABAEBECGGFFFCEABAEBECGGFFFABAEBECGGCEFFFCEAFBAEBECGGFFCEABAEBECGGFFFABAEBECGGCEFFFACEFBAEBECGGFFCEAFBAEBECGGFFABAEBECGGCEFFFACEBAEBECGGFFFACEFBAEBECGGFFAABAEBECGGCEFFCEBAEBECGGFFAHBAEBECGGCEFFCEBFAEBECGGFCEBAEBECGGFFBAEBECGGCEFFBCEFAEBECGGFCEBFAEBECGGFBAEBECGGCEFFBCEAEBECGGFFBCEFAEBECGGFBBAEBECGGCEFCEAEBECGGFBHAEBECGGCEPKBCEFAEBECGGFBCEAEBECGGFFBCEAEBECGGLMIBCEFCEBFAEBECGGAEBECGGBCEPAEAEBECGBECGAAAHNBEBECCBBBHNCHOOKICEBAEBECGGLIKACEFBAEBECGGFFACEBAEBECGGFFFACEBAEBECGGFLMIACEFCEAFBAEBECGGFBAEBECGGFACEPBAEBECGGFHKICEABAEBECGGFLICECEABAEBECGGFFABAEBECGGFFCEHABAEBECGGFFHKICECEABAEBECGGFFABAEBECGGFFCEHABAEBECGGFFHKIIIIIRCEABAEBECGGFFFCBECGCEABAEBECGGFFFFFSCEABAEBECGGFFFBECGCEABAEBECGGFFFFCBECGCEABAEBECGGFFFFFCEABAEBECGGFFFCEABAEBECGGFFFCEABAEBECGGFFFFBECGCEABAEBECGGFFFFCEABAEBECGGFFFCEABAEBECGGFFFCEABAEBECGGFFFFCEABAEBECGGFFFCEABAEBECGGFFFFCEABAEBECGGFFFCEABAEBECGGFFFUCMRCEABAEBECGGFFFBECGCEABAEBECGGFFFCEABAEBECGGFFFCEABAEBECGGFFFAEBECGGAFCEBFFBECGCEABAEBECGGFFFAEBECGGAFCEBFFCEABAEBECGGFFFAEBECGGACEBFFFAEBECGGAFCEBFFCEABAEBECGGFFFAEBECGGACEBFFFAEBECGGACEBFFFCEABAEBECGGFFFACEBAEBECGGFFFAEBECGGACEBFFFCEABAEBECGGFFFACEBAEBECGGFFFACEBAEBECGGFFFCEABAEBECGGFFFACEFBAEBECGGFFACEBAEBECGGFFFCEABAEBECGGFFFCEAFBAEBECGGFFACEFBAEBECGGFFCEABAEBECGGFFFCEABAEBECGGFFFCEAFBAEBECGGFFCECEABAEBECGGFFABAEBECGGFFCEHABAEBECGGFFHKCEAFBAEBECGGFFCEABAEBECGGFFFCEABAEBECGGFLMICEAFACEFBAEBECGGFBAEBECGGFCEAPBAEBECGGFHKIACEBAEBECGGFLIAACEBAEBECGGFFCEBAEBECGGFFAHCEBAEBECGGFFHKIACEBAEBECGGFFFAEBECGGAFCEBFFAEBECGGACEBFFFACEBAEBECGGFFFAAEBECGGFCEBFFAEBECGGAFCEBFFACEBAEBECGGFFFAAEBECGGCEBFFFAAEBECGGFCEBFFAACEBAEBECGGFFAEBECGGCEBFFAHCEBAEBECGGFFAEBECGGCEFBFAEBECGGCEBFFCEBAEBECGGFFCEAEBECGGFBFAEBECGGCEFBFCEBAEBECGGFFCEAEBECGGBFFCEAEBECGGFBFCECEBAEBECGGFAEBECGGBFCEHBAEBECGGPKCEAEBECGGFBFCEAEBECGGBFFCEAEBECGGBLMICEAEBECGGFAEBECGGCEFBBCEAEBECGGPBHKIAEBECGGCEBLIKAAEBECGGFCEBFFAAEBECGGCEBFFFAAEBECGGCEBFLMIAAEBECGGFAEBECGGAFCEBFCEBFAAEBECGGPCEBFHKIAEBECGGACEBFLIIAEBECGGAEBECGGACEBFFACEBFFAEAEBECGBECGAAAHNBEBECCBBBHNCHOOACEBFFHKIAEBECGGAFCEBFFAEBECGGACEBFFFAEBECGGACEBFLMIRAEBECGGAFCEBFFAEBECGGAFBECGAEBECGGAFCEBFUDAEBECGGAFBECGBECGABECGUFBECGBECGBEBECCBBBHNCHORQQQCEABAEBECGGFFFCEABAEBECGGFFFCECEABAEBECGGFFABAEBECGGFFCEHABAEBECGGFFHKRUEQBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFFBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFFBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFUCMRBECGCEABAEBECGGFFFFCBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFBECGBFCEAAEBECGGFFFCBECGCEABAEBECGGFFFFBECGBFCEAAEBECGGFFFBECGCEABAEBECGGFFFFBECGBCEAAEBECGGFFFFBECGBFCEAAEBECGGFFFBECGCEABAEBECGGFFFFBECGBCEAAEBECGGFFFFBECGBCEAAEBECGGFFFFBECGCEABAEBECGGFFFFBBECGCEAAEBECGGFFFFBECGBCEAAEBECGGFFFFBECGCEABAEBECGGFFFFBBECGCEAAEBECGGFFFFBBECGCEAAEBECGGFFFFBECGCEABAEBECGGFFFFBBECGFCEAAEBECGGFFFBBECGCEAAEBECGGFFFFBECGCEABAEBECGGFFFFBECGBFCEAAEBECGGFFFBBECGFCEAAEBECGGFFFBECGCEABAEBECGGFFFFBECGBCEAAEBECGGFFFFBECGBFCEAAEBECGGFFFBECGBECGCEABAEBECGGFFFBCEAAEBECGGFFFBEBECCBBBHNCHOCEABAEBECGGFFFBCEFAAEBECGGFFBCEAAEBECGGFFFCEABAEBECGGFFFCEBFAAEBECGGFFBCEFAAEBECGGFFCEABAEBECGGFFFCEBAAEBECGGFFFCEBFAAEBECGGFFCECEABAEBECGGFFBAAEBECGGFFCEHABAEBECGGFFBAFAEBECGGFBAAEBECGGFFABAEBECGGFFABFAEBECGGFBAFAEBECGGFABAEBECGGFFABAEBECGGFFABFAEBECGGFABAEBECGGFFHABFAEBECGGFABAEBECGGFFABAEBECGGLMIABFBAFAEBECGGAEBECGGABPAEAEBECGBECGAAAHNBEBECCBBBHNCHOOKIBAAEBECGGLIKCEBFAAEBECGGFFCEBAAEBECGGFFFCEBAAEBECGGFLMICEBFBCEFAAEBECGGFAAEBECGGFCEBPAAEBECGGFHKIBCEAAEBECGGFLIKBECGBFCEAAEBECGGFFFBECGBCEAAEBECGGFFFFBECGBCEAAEBECGGFFLMIBECGBFBBECGFCEAAEBECGGFFCEAAEBECGGFFBECGBPCEAAEBECGGFFHKIBBECGCEAAEBECGGFFLIBBBECGCEAAEBECGGFFFBECGCEAAEBECGGFFFBHBECGCEAAEBECGGFFFHKIBBECGCEAAEBECGGFFFFBECGBFCEAAEBECGGFFFBECGBCEAAEBECGGFFFFBBECGCEAAEBECGGFFFFBBECGFCEAAEBECGGFFFBECGBFCEAAEBECGGFFFBBECGCEAAEBECGGFFFFBBECGCEAAEBECGGFFFFBBECGFCEAAEBECGGFFFBBBECGCEAAEBECGGFFFBECGCEAAEBECGGFFFBHBECGCEAAEBECGGFFFHKBBECGFCEAAEBECGGFFFBBECGCEAAEBECGGFFFFBBECGCEAAEBECGGFFLMIBBECGFBECGBFCEAAEBECGGFFCEAAEBECGGFFBBECGPCEAAEBECGGFFHKIBECGBCEAAEBECGGFFLIIBECGBECGBCEAAEBECGGFFFBCEAAEBECGGFFFBEBECCBBBHNCHOBCEAAEBECGGFFFHKIBECGBFCEAAEBECGGFFFBECGBCEAAEBECGGFFFFBECGBCEAAEBECGGFFLMIRBECGBFCEAAEBECGGFFFBECGBFCBECGBFCEAAEBECGGFFUDBECGBFCCBCUFCCCHRQQQBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFHRUEQQCBECGCEABAEBECGGFFFFFSCBECGCEABAEBECGGFFFFFFSCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFFSCBECGCEABAEBECGGFFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFUCMRCBECGCEABAEBECGGFFFFFSCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCECFBECGABAEBECGGFFFFSCBECGCEABAEBECGGFFFFFCECFBECGABAEBECGGFFFFCBECGCEABAEBECGGFFFFFCECBECGABAEBECGGFFFFFCECFBECGABAEBECGGFFFFCBECGCEABAEBECGGFFFFFCECBECGABAEBECGGFFFFFCECBECGABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCECBECGABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFHCBECGCEABAEBECGGFFFFFHICBECGCEABAEBECGGFFFFFCECFBECGABAEBECGGFFFFCECBECGABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCCEFBECGABAEBECGGFFFFCECFBECGABAEBECGGFFFFCBECGCEABAEBECGGFFFFFCCEBECGABAEBECGGFFFFFCCEFBECGABAEBECGGFFFFCCBECGCEABAEBECGGFFFFCEBECGABAEBECGGFFFFCHBECGCEABAEBECGGFFFFCEBECGFABAEBECGGFFFCEBECGABAEBECGGFFFFBECGCEABAEBECGGFFFFBECGCEFABAEBECGGFFFCEBECGFABAEBECGGFFFBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFFFBECGCEFABAEBECGGFFFBECGCEABAEBECGGFFFFHBECGCEFABAEBECGGFFFBECGCEABAEBECGGFFFFBECGCEABAEBECGGFFLMIBECGCEFCEBECGFABAEBECGGFFABAEBECGGFFBECGCEPABAEBECGGFFHKICEBECGABAEBECGGFFLIKCCEFBECGABAEBECGGFFFFCCEBECGABAEBECGGFFFFFCCEBECGABAEBECGGFFFLMICCEFCECFBECGABAEBECGGFFFBECGABAEBECGGFFFCCEPBECGABAEBECGGFFFHKICECBECGABAEBECGGFFFLIICECECBECGABAEBECGGFFFFCBECGABAEBECGGFFFFCEHCBECGABAEBECGGFFFFHKICECFBECGABAEBECGGFFFFCECBECGABAEBECGGFFFFFCECBECGABAEBECGGFFFLMIRCECFBECGABAEBECGGFFFFCECFSCECFBECGABAEBECGGFFFUDCUIQQCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFCBECGCEABAEBECGGFFFFFHRUEQCBECGCEABAEBECGGFFFFFUJQQQUGDUG $.
$}

premises-switch-alt $p |- ( \imp ( \imp ph0 ( \imp ph1 ph2 ) ) ( \imp ph1 ( \imp ph0 ph2 ) ) ) $=
    ( not-is-pattern and-is-pattern or-is-pattern rule-iff-transitivity iff-reflexivity imp-is-pattern rule-iff-compat-in-and and-associativity rule-iff-symmetry rule-iff-compat-in-not and-commutativity rule-iff-compat-in-or rule-imp-transitivity rule-iff-elim-left bot-is-pattern imp-to-or de-morgan-or double-negation and-idempotency or-commutativity and-elim-left-sugar rule-imp-compat-in-and or-associativity contradiction resolution-3 resolution-2 resolution-1 and-bot proof-rule-mp ) ABCIIBACIIIDRIABCIIBACIIIABCIIBACIIIUGABCIIBACIIIDCDABADBDCFFEEERABCIIBACIIIDCDABADBDCFFEEEABCIIBACIIIDADBDCFFBACDEEECDABADBDCFFEEEABCIIBACIIIDADBDCFFDBDADCFFFDADBDCFFBACDEEEABCIIBACIIIADBDCFFDBDADCFFFABCIIBACIIIABCIIDBACIIFADBDCFFDBDADCFFFABCIIBACIISABCIIDADBDCFFDBACIIBDADCFFABCIIADBDCFFABCIIADBCIFADBDCFFABCISADADBCIBDCFAAAHMBCIBDCFBDCFBCSBDBDCCBBBHMCHOGOGMBACIIBDACIFBDADCFFBACISBDBDACIADCFBBBHMACIADCFADCFACSADADCCAAAHMCHOGOGOGMADBDCFFDBDADCFFFDADBDCFFDDBDADCFFDEADBDCFFBACDEEEADBDCFFDBDADCFFTADBDCFFDDBDADCFFDEADBDCFFBACDEEEADBDCFFBACDEEEADBDCFFDDADBDCFFBDADCFFDBACDEEADBDCFFDDADBDCFFADBDCFFADBDCFFUAADBDCFFADBDCFFADBDCFFADADBDCFBDCFAAAHMBDBDCCBBBHMCHOOADADBDCFBDCFAAAHMBDBDCCBBBHMCHOOGGBDADCFFDBDDADCFDEBACDEEBDADCFTBDDADCFDEBACDEEBACDEEBDDBADCFDACDEBDDBBBUABHGADCFDADDCDEACDEADCTADDCDEACDEACDEADDACDCDADDAAAUAAHGCDHJACDEHGGJBACDEEHGGJADBDCFFBACDEEEHGGGADBDCFFBACDEEEADBDCFFBACDEEECDABADBDCFFEEEADBDCFFBACDEEEHADBDCFFBACDEEEBADBDCFFACDEEECDABADBDCFFEEEADBDCFFBACDEEEBADBDCFFACDEEEBADBDCFFACDEEEADBDCFFBACDEEEBADBDCFFEACDEEBADBDCFFACDEEEADBDCFFBACDEEEADBDCFFBEACDEEBADBDCFFEACDEEADBDCFFBACDEEEADBDCFFBACDEEEADBDCFFBEACDEEADBDCFFBACDEEEHADBDCFFBEACDEEADBDCFFBACDEEEADBDCFFBACDEKLGADBDCFFBEBADBDCFFEACDEACDEADBDCFFBNACDEHJGBADBDCFFACDEKGBBADBDCFFACDEEADBDCFFACDEEBHADBDCFFACDEEHJGBADBDCFFACDEEEABADBDCFFCDEEECDABADBDCFFEEEBADBDCFFACDEEEABADBDCFFCDEEEABADBDCFFCDEEEBADBDCFFACDEEEABEADBDCFFCDEEABADBDCFFCDEEEBADBDCFFACDEEEBAEADBDCFFCDEEABEADBDCFFCDEEBADBDCFFACDEEEBAADBDCFFCDEEEBAEADBDCFFCDEEBBADBDCFFACDEEAADBDCFFCDEEBHADBDCFFACDEEAADBDCFFECDEAADBDCFFCDEEADBDCFFACDEEADBDCFFAECDEAADBDCFFECDEADBDCFFACDEEADBDCFFACDEEADBDCFFAECDEADBDCFFACDEEHADBDCFFAECDEADBDCFFACDEEADBDCFFACDKLGADBDCFFAEAADBDCFFECDCDADBDCFFANCDHJGAADBDCFFCDKGJBAEADBDCFFCDEEBAADBDCFFCDEEEBAADBDCFFCDEKLGBAEABEADBDCFFCDEADBDCFFCDEBANADBDCFFCDEHJGABADBDCFFCDEKGAABADBDCFFCDEEBADBDCFFCDEEAHBADBDCFFCDEEHJGABADBDCFFCDEEECDABADBDCFFEEECDABADBDCFFEEEABADBDCFFCDEEECDABADBDCFFEEECDABADBDCFFEEEABADBDCFFCDEEECDAEBADBDCFFEECDABADBDCFFEEEABADBDCFFCDEEEACDEBADBDCFFEECDAEBADBDCFFEEABADBDCFFCDEEEACDBADBDCFFEEEACDEBADBDCFFEEAABADBDCFFCDEECDBADBDCFFEEAHBADBDCFFCDEECDBEADBDCFFECDBADBDCFFEEBADBDCFFCDEEBCDEADBDCFFECDBEADBDCFFEBADBDCFFCDEEBCDADBDCFFEEBCDEADBDCFFEBBADBDCFFCDECDADBDCFFEBHADBDCFFCDNJBCDEADBDCFFEBCDADBDCFFEEBCDADBDCFFKLGBCDECDBEADBDCFFADBDCFFBCDNADADBDCFBDCFAAAHMBDBDCCBBBHMCHOOJGCDBADBDCFFKGJACDEBADBDCFFEEACDBADBDCFFEEEACDBADBDCFFEKLGACDECDAEBADBDCFFEBADBDCFFEACDNBADBDCFFEHJGCDABADBDCFFEKGCDCDABADBDCFFEEABADBDCFFEECDHABADBDCFFEEHJGCDCDABADBDCFFEEABADBDCFFEECDHABADBDCFFEEHJGGGGGQCDABADBDCFFEEEADADBDFCDABADBDCFFEEEEERCDABADBDCFFEEEADBDFCDABADBDCFFEEEEADADBDFCDABADBDCFFEEEEECDABADBDCFFEEECDABADBDCFFEEECDABADBDCFFEEEEADBDFCDABADBDCFFEEEECDABADBDCFFEEECDABADBDCFFEEECDABADBDCFFEEEECDABADBDCFFEEECDABADBDCFFEEEECDABADBDCFFEEECDABADBDCFFEEEUBLQCDABADBDCFFEEEADBDFCDABADBDCFFEEECDABADBDCFFEEECDABADBDCFFEEECDCADBDFFEABEEADBDFCDABADBDCFFEEECDCADBDFFEABEECDABADBDCFFEEECDCADBDFFABEEECDCADBDFFEABEECDABADBDCFFEEECDCADBDFFABEEECDCADBDFFABEEECDABADBDCFFEEECADBDFFCDABEEECDCADBDFFABEEECDABADBDCFFEEEADBDCFFCDABEEECADBDFFCDABEEECDABADBDCFFEEEADBDCFFCDEABEEADBDCFFCDABEEECDABADBDCFFEEECDADBDCFFEABEEADBDCFFCDEABEECDABADBDCFFEEECDADBDCFFABEEECDADBDCFFEABEECDCDABADBDCFFEEADBDCFFABEECDHABADBDCFFEEADBDCFFAEBEADBDCFFABEEABADBDCFFEEAADBDCFFEBEADBDCFFAEBEABADBDCFFEEAADBDCFFBEEAADBDCFFEBEAABADBDCFFEADBDCFFBEAHBADBDCFFNJAADBDCFFEBEAADBDCFFBEEAADBDCFFBKLGAADBDCFFEADBDCFFAEBBAADBDCFFNBHJGADBDCFFABKGJCDADBDCFFEABEECDADBDCFFABEEECDADBDCFFABEKLGCDADBDCFFEADBDCFFCDEABEABECDADBDCFFNABEHJGADBDCFFCDABEKGADBDCFFCADBDFFCDABEECDABEEADBDCFFCADFBDFCADBDFFADBDCFFADCFBDFCADFBDFADBDCFFADCBDFFADCFBDFADADBDCFCBDFAAAHMBDCUCOADCFBDFADCBDFFADCBDUFLGADCFCADFBDBDADCUCBBBHMOGCADBDUFGCDABEEHJGCADBDFFCDABEEECDCADBDFFEABEECDCADBDFFABEEECADBDFFCDABEEECADBDFFCDEABEECDCADBDFFEABEECADBDFFCDABEEECADBDFFCDABEEECADBDFFCDEABEECADBDFFCADBDFFCDABEECDABEECADBDFFHCDABEEHJCADBDFFCDEABEECADBDFFCDABEEECADBDFFCDABEKLGCADBDFFCDECDCADBDFFEABEABECADBDFFCDNABEHJGCDCADBDFFABEKGGCDCDCADBDFFABEECADBDFFABEECDHCADBDFFABEEHJGCDCADBDFFEABEECDCADBDFFABEEECDCADBDFFABEKLGQCDCADBDFFEABEECDCADBDFFEADBDFCDCADBDFFEABEUDCDCADBDFFEADBDFADBDFCADBDFUHADBDFADBDFADBDFHQPPPCDABADBDCFFEEECDABADBDCFFEEECDCDABADBDCFFEEABADBDCFFEECDHABADBDCFFEEHJQUEPADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEEADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEEADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEUBLQADBDFCDABADBDCFFEEEEADADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEBDADFBECDAADBDCFFEEEADADBDFCDABADBDCFFEEEEBDADFBECDAADBDCFFEEEADBDFCDABADBDCFFEEEEBDADFBCDAADBDCFFEEEEBDADFBECDAADBDCFFEEEADBDFCDABADBDCFFEEEEADBDFBCDAADBDCFFEEEEBDADFBCDAADBDCFFEEEEADBDFCDABADBDCFFEEEEBADBDFCDAADBDCFFEEEEADBDFBCDAADBDCFFEEEEADBDFCDABADBDCFFEEEEBADBDFCDAADBDCFFEEEEBADBDFCDAADBDCFFEEEEADBDFCDABADBDCFFEEEEBADBDFECDAADBDCFFEEEBADBDFCDAADBDCFFEEEEADBDFCDABADBDCFFEEEEADBDFBECDAADBDCFFEEEBADBDFECDAADBDCFFEEEADBDFCDABADBDCFFEEEEADBDFBCDAADBDCFFEEEEADBDFBECDAADBDCFFEEEADBDFADBDFCDABADBDCFFEEEBCDAADBDCFFEEEADBDFHCDABADBDCFFEEEBCDEAADBDCFFEEBCDAADBDCFFEEECDABADBDCFFEEECDBEAADBDCFFEEBCDEAADBDCFFEECDABADBDCFFEEECDBAADBDCFFEEECDBEAADBDCFFEECDCDABADBDCFFEEBAADBDCFFEECDHABADBDCFFEEBAEADBDCFFEBAADBDCFFEEABADBDCFFEEABEADBDCFFEBAEADBDCFFEABADBDCFFEEABADBDCFFEEABEADBDCFFEABADBDCFFEEHABEADBDCFFEABADBDCFFEEABADBDCFFKLGABEBAEADBDCFFADBDCFFABNADADBDCFBDCFAAAHMBDBDCCBBBHMCHOOJGBAADBDCFFKGJCDBEAADBDCFFEECDBAADBDCFFEEECDBAADBDCFFEKLGCDBEBCDEAADBDCFFEAADBDCFFECDBNAADBDCFFEHJGBCDAADBDCFFEKGJADBDFBECDAADBDCFFEEEADBDFBCDAADBDCFFEEEEADBDFBCDAADBDCFFEEKLGADBDFBEBADBDFECDAADBDCFFEECDAADBDCFFEEADBDFBNCDAADBDCFFEEHJGBADBDFCDAADBDCFFEEKGBBADBDFCDAADBDCFFEEEADBDFCDAADBDCFFEEEBHADBDFCDAADBDCFFEEEHJGBADBDFCDAADBDCFFEEEEADBDFBECDAADBDCFFEEEADBDFBCDAADBDCFFEEEEBADBDFCDAADBDCFFEEEEBADBDFECDAADBDCFFEEEADBDFBECDAADBDCFFEEEBADBDFCDAADBDCFFEEEEBADBDFCDAADBDCFFEEEEBADBDFECDAADBDCFFEEEBBADBDFCDAADBDCFFEEEADBDFCDAADBDCFFEEEBHADBDFCDAADBDCFFEEEHJBADBDFECDAADBDCFFEEEBADBDFCDAADBDCFFEEEEBADBDFCDAADBDCFFEEKLGBADBDFEADBDFBECDAADBDCFFEECDAADBDCFFEEBADBDFNCDAADBDCFFEEHJGADBDFBCDAADBDCFFEEKGGADBDFBDADFBCDAADBDCFFEEEBCDAADBDCFFEEEADBDUCBCDAADBDCFFEEEHJGBDADFBECDAADBDCFFEEEBDADFBCDAADBDCFFEEEEBDADFBCDAADBDCFFEEKLGQBDADFBECDAADBDCFFEEEBDADFBEADBDADFBECDAADBDCFFEEUDBDADFBEADADBADUIADADAAAHMQPPPADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEADBDFCDABADBDCFFEEEEHQUEPPADADBDFCDABADBDCFFEEEEERADADBDFCDABADBDCFFEEEEEERADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEERADADBDFCDABADBDCFFEEEEEEADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEEADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEEADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEUBLQADADBDFCDABADBDCFFEEEEERADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEADAEADBDFCDBADBDCFFEEEERADADBDFCDABADBDCFFEEEEEADAEADBDFCDBADBDCFFEEEEADADBDFCDABADBDCFFEEEEEADAADBDFCDBADBDCFFEEEEEADAEADBDFCDBADBDCFFEEEEADADBDFCDABADBDCFFEEEEEADAADBDFCDBADBDCFFEEEEEADAADBDFCDBADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEAADADBDFCDBADBDCFFEEEEEADAADBDFCDBADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEAADADBDFCDBADBDCFFEEEEEAADADBDFCDBADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEAADEADBDFCDBADBDCFFEEEEAADADBDFCDBADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEADAEADBDFCDBADBDCFFEEEEAADEADBDFCDBADBDCFFEEEEADADBDFCDABADBDCFFEEEEEADAADBDFCDBADBDCFFEEEEEADAEADBDFCDBADBDCFFEEEEADADADBDFCDABADBDCFFEEEEAADBDFCDBADBDCFFEEEEAAAHMADBDFCDABADBDCFFEEEEAADBDFECDBADBDCFFEEEAADBDFCDBADBDCFFEEEEADBDFCDABADBDCFFEEEEADBDFAECDBADBDCFFEEEAADBDFECDBADBDCFFEEEADBDFCDABADBDCFFEEEEADBDFACDBADBDCFFEEEEADBDFAECDBADBDCFFEEEADBDFADBDFCDABADBDCFFEEEACDBADBDCFFEEEADBDFHCDABADBDCFFEEEACDEBADBDCFFEEACDBADBDCFFEEECDABADBDCFFEEECDAEBADBDCFFEEACDEBADBDCFFEECDABADBDCFFEEECDABADBDCFFEEECDAEBADBDCFFEECDCDABADBDCFFEEABADBDCFFEECDHABADBDCFFEEHJCDAEBADBDCFFEECDABADBDCFFEEECDABADBDCFFEKLGCDAEACDEBADBDCFFEBADBDCFFECDANBADBDCFFEHJGACDBADBDCFFEKGJADBDFAECDBADBDCFFEEEADBDFACDBADBDCFFEEEEADBDFACDBADBDCFFEEKLGADBDFAEAADBDFECDBADBDCFFEECDBADBDCFFEEADBDFANCDBADBDCFFEEHJGAADBDFCDBADBDCFFEEKGJADAEADBDFCDBADBDCFFEEEEADAADBDFCDBADBDCFFEEEEEADAADBDFCDBADBDCFFEEEKLGADAEAADEADBDFCDBADBDCFFEEEADBDFCDBADBDCFFEEEADANADBDFCDBADBDCFFEEEHJGAADADBDFCDBADBDCFFEEEKGAAADADBDFCDBADBDCFFEEEEADADBDFCDBADBDCFFEEEEAHADADBDFCDBADBDCFFEEEEHJGAADADBDFCDBADBDCFFEEEEEADAEADBDFCDBADBDCFFEEEEADAADBDFCDBADBDCFFEEEEEAADADBDFCDBADBDCFFEEEEEAADEADBDFCDBADBDCFFEEEEADAEADBDFCDBADBDCFFEEEEAADADBDFCDBADBDCFFEEEEEAADADBDFCDBADBDCFFEEEEEAADEADBDFCDBADBDCFFEEEEAAADADBDFCDBADBDCFFEEEEADADBDFCDBADBDCFFEEEEAHADADBDFCDBADBDCFFEEEEHJAADEADBDFCDBADBDCFFEEEEAADADBDFCDBADBDCFFEEEEEAADADBDFCDBADBDCFFEEEKLGAADEADAEADBDFCDBADBDCFFEEEADBDFCDBADBDCFFEEEAADNADBDFCDBADBDCFFEEEHJGADAADBDFCDBADBDCFFEEEKGGADADAADBDFCDBADBDCFFEEEEAADBDFCDBADBDCFFEEEEAAAHMAADBDFCDBADBDCFFEEEEHJGADAEADBDFCDBADBDCFFEEEEADAADBDFCDBADBDCFFEEEEEADAADBDFCDBADBDCFFEEEKLGQADAEADBDFCDBADBDCFFEEEEADAERADAEADBDFCDBADBDCFFEEEUDAUJPPADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEADADBDFCDABADBDCFFEEEEEHQUEPADADBDFCDABADBDCFFEEEEEUKPPPUL $.
